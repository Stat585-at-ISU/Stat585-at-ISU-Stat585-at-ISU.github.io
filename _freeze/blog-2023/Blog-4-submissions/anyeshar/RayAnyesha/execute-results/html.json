{
  "hash": "d93352a2e6c7cfab046be378348d44b1",
  "result": {
    "markdown": "---\nauthor: \"AR\"\ntitle: \"plyr to dplyr\"\ncategory: Split-apply-combine\ndate: 2022-02-16\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n    \n\n\n::: {.cell hash='RayAnyesha_cache/html/unnamed-chunk-2_34351e530cb07c01634280f94ddfabb0'}\n\n```{.r .cell-code}\nlibrary(plyr)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:plyr':\n#> \n#>     arrange, count, desc, failwith, id, mutate, rename, summarise,\n#>     summarize\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\nbaseball <- ddply(baseball, .(id), transform,\n  cyear = year - min(year) + 1)\n\n\n#using dplyr\nbaseball%>%\n  group_by(id)%>%\n  mutate(cyear = year - min(year) + 1)\n#> # A tibble: 21,699 × 23\n#> # Groups:   id [1,228]\n#>    id     year stint team  lg        g    ab     r     h   X2b   X3b    hr   rbi\n#>    <chr> <int> <int> <chr> <chr> <int> <int> <int> <int> <int> <int> <int> <int>\n#>  1 aaro…  1954     1 ML1   NL      122   468    58   131    27     6    13    69\n#>  2 aaro…  1955     1 ML1   NL      153   602   105   189    37     9    27   106\n#>  3 aaro…  1956     1 ML1   NL      153   609   106   200    34    14    26    92\n#>  4 aaro…  1957     1 ML1   NL      151   615   118   198    27     6    44   132\n#>  5 aaro…  1958     1 ML1   NL      153   601   109   196    34     4    30    95\n#>  6 aaro…  1959     1 ML1   NL      154   629   116   223    46     7    39   123\n#>  7 aaro…  1960     1 ML1   NL      153   590   102   172    20    11    40   126\n#>  8 aaro…  1961     1 ML1   NL      155   603   115   197    39    10    34   120\n#>  9 aaro…  1962     1 ML1   NL      156   592   127   191    28     6    45   128\n#> 10 aaro…  1963     1 ML1   NL      161   631   121   201    29     4    44   130\n#> # … with 21,689 more rows, and 10 more variables: sb <int>, cs <int>, bb <int>,\n#> #   so <int>, ibb <int>, hbp <int>, sh <int>, sf <int>, gidp <int>, cyear <dbl>\n```\n:::\n\nI chose to replace the ddply function. ddply splits data frames by variables, which can be done in dplyr with group_by. mutate creates new columns that are functions of existing variables.\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n\n-\tsplit()\n-\tlapply()\n-\trbind()\n\nare all functions in base R. I think they work well, but maybe not as efficiently as plyr. However, I do believe they are sufficient. I use rbind and lapply() all the time. \n\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\nFirst thing is, I wouldn’t say “analyze grouped data”. To me, it isn’t incorrect, just not great wording. It also missed that split-apply-combine can be used in base R and plyr.  Also, it missed that it is a paradigm and therefor has many applications outside of just data cleaning and manipulation. As Hadley Wickham's paper says, you can use it in modeling and visualization as well. \n    \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}