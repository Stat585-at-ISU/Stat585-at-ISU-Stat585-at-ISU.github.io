{
  "hash": "5653d65abfe10208dd4a3b15bdee28c4",
  "result": {
    "markdown": "---\nauthor: \"Sudesh Bhagat\"\ntitle: \"Split-apply-combine\"\ncategory: \"Split-apply-combine\"\ndate: \"2023-02-16\"\noutput: html_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n::: {.cell hash='SudeshBhagat_cache/html/unnamed-chunk-2_cf580db8eb6d45b051614e50ac2a3dcc'}\n\n```{.r .cell-code}\nlibrary(plyr)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:plyr':\n#> \n#>     arrange, count, desc, failwith, id, mutate, rename, summarise,\n#>     summarize\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n```\n:::\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n##Example from the paper plyr package\n\n::: {.cell hash='SudeshBhagat_cache/html/unnamed-chunk-3_9ed8244b6418feb7d227f532464b526a'}\n\n```{.r .cell-code}\n# Base ball case study ============================================\nbaberuth_plyr <- subset(baseball, id == \"ruthba01\")\nbaberuth_plyr <- transform(baberuth_plyr, cyear = year - min(year) + 1)\n\n# Base ball case study ============================================\nbaseball_plyr<- ddply(baseball, .(id), transform, \n  cyear = year - min(year) + 1)\n```\n:::\n\n##Rewrite with dplyr package\n\n::: {.cell hash='SudeshBhagat_cache/html/unnamed-chunk-4_42a6e008e459b24ca5ac5e427a033162'}\n\n```{.r .cell-code}\nbaberuth_dplyr <- baseball %>% \n  filter(id == \"ruthba01\") %>% \n  mutate(cyear = year - min(year) + 1)\n\n\n########Baseball\nbaseball_dplyr <- baseball %>%\n  group_by(id) %>%\n  mutate(cyear = year - min(year) + 1)\n \n```\n:::\n\n\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n    \nlapply: lapply is used to iteratively apply a function to each element in a list.\n\nsapply: Sapply turns around the list, vector or data frame to give an output in the form of a vector,\n\nmatrix, or an array, depending upon the structure of the input.\n\ntapply: tapply applies a measure or a function to subsets within a vector and provides output in the\nform of an array.\n\nData manipulation requires functions that are more sophisticated than the ones above, as these would\nrequire writing a complex code. These functions are also not as convenient and efficient as dplyr and\nplyr.\n\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\n    \n>    The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science to analyze grouped data. It consists of three steps:\n>\n>    Split: The data is first split into groups based on one or more variables of interest.\n>\n>    Apply: A specific operation or function is applied to each group of data, usually for the purpose of aggregating, summarizing, or transforming the data within each group.\n>\n> Combine: The results of the operation applied to each group are then combined and returned as a single output.\n>\n> The split-apply-combine paradigm is particularly useful in cases where the data cannot be analyzed as a whole and instead must be analyzed in smaller, more manageable chunks. This allows for more efficient data processing and improved scalability. The paradigm is commonly implemented using tools such as the \"groupby\" function in the R and Python programming languages, and the \"dplyr\" library in R.\n\n\n\nChange : The aggregation, completion and modelling of data is carried out using the split-apply-combine strategy. It\nprovides a clear, flexible and efficient way to perform complex data analysis. The split-apply-combine\nstrategy is implemented in R packages such as plyr, dplyr, and data.table.\n\n\n\n\n\nYou can write your answers directly the `README.Rmd` file. \nMake sure that the file knits (you will need to activate any packages your use in your code chunks with a call to `library(xxx)`, where xxx is the name of the package, such as `plyr` ).\nCommit your changes and push to your repo;  add any files in the `README_files` directory to your repository. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}