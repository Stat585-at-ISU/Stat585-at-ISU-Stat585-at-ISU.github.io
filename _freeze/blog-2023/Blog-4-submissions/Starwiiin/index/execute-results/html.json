{
  "hash": "0f38f57627b24b062897e4ca98c8b206",
  "result": {
    "markdown": "---\nauthor: \"Parvin Mohammadiarvejeh\"\ntitle: \"Split-apply-combine\"\ncategories: Split-apply-combine\ndate: 2023-02-16\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n\n# load the packages\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_a43f6276e7677e88f3cae1403a36ac1b'}\n\n```{.r .cell-code}\nlibrary(plyr)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:plyr':\n#> \n#>     arrange, count, desc, failwith, id, mutate, rename, summarise,\n#>     summarize\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\nlibrary(ggplot2)\n```\n:::\n\n\n# Load the data\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_242c88acb503d468965b4d93e14f54ea'}\n\n```{.r .cell-code}\n\ndata(\"baseball\")\nhead(baseball)\n#>            id year stint team lg  g  ab  r  h X2b X3b hr rbi sb cs bb so ibb\n#> 4   ansonca01 1871     1  RC1    25 120 29 39  11   3  0  16  6  2  2  1  NA\n#> 44  forceda01 1871     1  WS3    32 162 45 45   9   4  0  29  8  0  4  0  NA\n#> 68  mathebo01 1871     1  FW1    19  89 15 24   3   1  0  10  2  1  2  0  NA\n#> 99  startjo01 1871     1  NY2    33 161 35 58   5   1  1  34  4  2  3  0  NA\n#> 102 suttoez01 1871     1  CL1    29 128 35 45   3   7  3  23  3  1  1  0  NA\n#> 106 whitede01 1871     1  CL1    29 146 40 47   6   5  1  21  2  2  4  1  NA\n#>     hbp sh sf gidp\n#> 4    NA NA NA   NA\n#> 44   NA NA NA   NA\n#> 68   NA NA NA   NA\n#> 99   NA NA NA   NA\n#> 102  NA NA NA   NA\n#> 106  NA NA NA   NA\nsummary(baseball)\n#>       id                 year          stint           team          \n#>  Length:21699       Min.   :1871   Min.   :1.000   Length:21699      \n#>  Class :character   1st Qu.:1937   1st Qu.:1.000   Class :character  \n#>  Mode  :character   Median :1970   Median :1.000   Mode  :character  \n#>                     Mean   :1961   Mean   :1.093                     \n#>                     3rd Qu.:1988   3rd Qu.:1.000                     \n#>                     Max.   :2007   Max.   :4.000                     \n#>                                                                      \n#>       lg                  g                ab              r         \n#>  Length:21699       Min.   :  0.00   Min.   :  0.0   Min.   :  0.00  \n#>  Class :character   1st Qu.: 29.00   1st Qu.: 25.0   1st Qu.:  2.00  \n#>  Mode  :character   Median : 59.00   Median :131.0   Median : 15.00  \n#>                     Mean   : 72.82   Mean   :225.4   Mean   : 31.78  \n#>                     3rd Qu.:125.00   3rd Qu.:435.0   3rd Qu.: 58.00  \n#>                     Max.   :165.00   Max.   :705.0   Max.   :177.00  \n#>                                                                      \n#>        h               X2b             X3b               hr        \n#>  Min.   :  0.00   Min.   : 0.00   Min.   : 0.000   Min.   : 0.000  \n#>  1st Qu.:  4.00   1st Qu.: 0.00   1st Qu.: 0.000   1st Qu.: 0.000  \n#>  Median : 32.00   Median : 5.00   Median : 1.000   Median : 1.000  \n#>  Mean   : 61.76   Mean   :10.45   Mean   : 2.194   Mean   : 5.234  \n#>  3rd Qu.:119.00   3rd Qu.:19.00   3rd Qu.: 3.000   3rd Qu.: 7.000  \n#>  Max.   :257.00   Max.   :64.00   Max.   :28.000   Max.   :73.000  \n#>                                                                    \n#>       rbi               sb                cs             bb        \n#>  Min.   :  0.00   Min.   :  0.000   Min.   : 0.0   Min.   :  0.00  \n#>  1st Qu.:  1.00   1st Qu.:  0.000   1st Qu.: 0.0   1st Qu.:  1.00  \n#>  Median : 14.00   Median :  1.000   Median : 0.0   Median : 11.00  \n#>  Mean   : 29.59   Mean   :  5.168   Mean   : 2.1   Mean   : 22.49  \n#>  3rd Qu.: 51.00   3rd Qu.:  5.000   3rd Qu.: 3.0   3rd Qu.: 38.00  \n#>  Max.   :184.00   Max.   :130.000   Max.   :42.0   Max.   :232.00  \n#>  NA's   :12       NA's   :250       NA's   :4525                   \n#>        so              ibb               hbp               sh        \n#>  Min.   :  0.00   Min.   :  0.000   Min.   : 0.000   Min.   : 0.000  \n#>  1st Qu.:  4.00   1st Qu.:  0.000   1st Qu.: 0.000   1st Qu.: 0.000  \n#>  Median : 19.00   Median :  0.000   Median : 0.000   Median : 1.000  \n#>  Mean   : 29.26   Mean   :  2.292   Mean   : 1.543   Mean   : 3.388  \n#>  3rd Qu.: 45.00   3rd Qu.:  3.000   3rd Qu.: 2.000   3rd Qu.: 5.000  \n#>  Max.   :189.00   Max.   :120.000   Max.   :51.000   Max.   :52.000  \n#>  NA's   :1305     NA's   :7528      NA's   :377      NA's   :960     \n#>        sf              gidp       \n#>  Min.   : 0.000   Min.   : 0.000  \n#>  1st Qu.: 0.000   1st Qu.: 0.000  \n#>  Median : 1.000   Median : 2.000  \n#>  Mean   : 1.842   Mean   : 4.774  \n#>  3rd Qu.: 3.000   3rd Qu.: 8.000  \n#>  Max.   :19.000   Max.   :36.000  \n#>  NA's   :7390     NA's   :5272\n```\n:::\n\n\n\n# Select the columns....\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_f04fc9bfb8e08f6f232c6adf7f0f15e5'}\n\n```{.r .cell-code}\nbaseball_1 = select(baseball, id, year, ab, rbi)\nhead(baseball_1)\n#>            id year  ab rbi\n#> 4   ansonca01 1871 120  16\n#> 44  forceda01 1871 162  29\n#> 68  mathebo01 1871  89  10\n#> 99  startjo01 1871 161  34\n#> 102 suttoez01 1871 128  23\n#> 106 whitede01 1871 146  21\n```\n:::\n\n\n# Drop the NAs\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_21f73965a1a9d4e0321540bb09184a91'}\n\n```{.r .cell-code}\nlibrary(tidyr)\nbaseball_1 = drop_na(baseball_1)\nsummary(baseball_1)\n#>       id                 year            ab             rbi        \n#>  Length:21687       Min.   :1871   Min.   :  0.0   Min.   :  0.00  \n#>  Class :character   1st Qu.:1937   1st Qu.: 25.0   1st Qu.:  1.00  \n#>  Mode  :character   Median :1970   Median :131.0   Median : 14.00  \n#>                     Mean   :1961   Mean   :225.4   Mean   : 29.59  \n#>                     3rd Qu.:1988   3rd Qu.:435.0   3rd Qu.: 51.00  \n#>                     Max.   :2007   Max.   :705.0   Max.   :184.00\n```\n:::\n\n\n\n\n# Group by the players by ID\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_7ee2db3234c7960098276e5ddb635ab2'}\n\n```{.r .cell-code}\nplayers_df <- group_by(baseball_1, id)\nplayers_df\n#> # A tibble: 21,687 × 4\n#> # Groups:   id [1,228]\n#>    id         year    ab   rbi\n#>    <chr>     <int> <int> <int>\n#>  1 ansonca01  1871   120    16\n#>  2 forceda01  1871   162    29\n#>  3 mathebo01  1871    89    10\n#>  4 startjo01  1871   161    34\n#>  5 suttoez01  1871   128    23\n#>  6 whitede01  1871   146    21\n#>  7 yorkto01   1871   145    23\n#>  8 ansonca01  1872   217    50\n#>  9 burdoja01  1872   174    15\n#> 10 forceda01  1872   130    16\n#> # … with 21,677 more rows\n```\n:::\n\n\n\n\n# Create the career year using mutate function\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_ac74a4a1ed00fd87647dcc26f1ac94d4'}\n\n```{.r .cell-code}\nplayers_df_cyear = mutate(players_df, cyear = year - min(year) + 1)\nplayers_df_cyear\n#> # A tibble: 21,687 × 5\n#> # Groups:   id [1,228]\n#>    id         year    ab   rbi cyear\n#>    <chr>     <int> <int> <int> <dbl>\n#>  1 ansonca01  1871   120    16     1\n#>  2 forceda01  1871   162    29     1\n#>  3 mathebo01  1871    89    10     1\n#>  4 startjo01  1871   161    34     1\n#>  5 suttoez01  1871   128    23     1\n#>  6 whitede01  1871   146    21     1\n#>  7 yorkto01   1871   145    23     1\n#>  8 ansonca01  1872   217    50     2\n#>  9 burdoja01  1872   174    15     1\n#> 10 forceda01  1872   130    16     2\n#> # … with 21,677 more rows\n```\n:::\n\n\n\n\n# Get the rows that ab is greater than 25\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_660c9bc65cad16e83e47c8a985230561'}\n\n```{.r .cell-code}\nplayers_df_cyear_sub = filter(players_df_cyear, ab > 25)\n```\n:::\n\n\n\n\n\n\n\n# Add a column which is rbi/ab\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_f768460bedd3114b0a64fa32ea40c932'}\n\n```{.r .cell-code}\nplayers_df_cyear_sub = mutate(players_df_cyear, ratio_rbi_ab = rbi/ab)\nplayers_df_cyear_sub\n#> # A tibble: 21,687 × 6\n#> # Groups:   id [1,228]\n#>    id         year    ab   rbi cyear ratio_rbi_ab\n#>    <chr>     <int> <int> <int> <dbl>        <dbl>\n#>  1 ansonca01  1871   120    16     1       0.133 \n#>  2 forceda01  1871   162    29     1       0.179 \n#>  3 mathebo01  1871    89    10     1       0.112 \n#>  4 startjo01  1871   161    34     1       0.211 \n#>  5 suttoez01  1871   128    23     1       0.180 \n#>  6 whitede01  1871   146    21     1       0.144 \n#>  7 yorkto01   1871   145    23     1       0.159 \n#>  8 ansonca01  1872   217    50     2       0.230 \n#>  9 burdoja01  1872   174    15     1       0.0862\n#> 10 forceda01  1872   130    16     2       0.123 \n#> # … with 21,677 more rows\n```\n:::\n\n\n\n\n\n\n\n\n# Another solution that I had\n# Compute the career year function\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_33284ec3781ec054cc7107eeb07ebccf'}\n\n```{.r .cell-code}\n#compute_cyear <- function(player_id){\n#sub_data = subset(baseball_1, id == player_id)\n#cyear = transform(sub_data, cyear = year - min(year) + 1)\n\n```\n:::\n\n\n\n\n\n# Get the unique id for players and get the cyear using compute_cyear function\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_5b8a019afda4b94bd08770c6bc6627c6'}\n\n```{.r .cell-code}\n#players_id = unique(baseball_1$id)\n#data = lapply(players_id,  compute_cyear)\n\n```\n:::\n\n\n\n\n\n\n# Subset the ab>25 for all the data sets\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_86e03fadb8d1e7eeda46f3259593313d'}\n\n```{.r .cell-code}\n#for (i in 1:length(players_id)) {  \n#  data[[i]] = subset(data[[i]], ab>25)\n#  data[[i]]$ratio_rbi_ab = data[[i]]$rbi/data[[i]]$ab\n#}\n\n\n#data[[6]]\n\n```\n:::\n\n\n\n\n\n\n\n# A function to plot the...\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_874eac3546a3c209b75f75c8d94bb00c'}\n\n```{.r .cell-code}\n\n\n\n\n#plotpattern <- function(df) {\n  \n#  xlim <- range(df$cyear, na.rm=TRUE)\n#  ylim <- range(df$ratio_rbi_ab, na.rm=TRUE)\n#  qplot(cyear, ratio_rbi_ab, data = df, geom = \"line\",\n#  xlim = xlim, ylim = ylim)\n#}\n\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_52e6bf06f5a5169453efc1dfc05916be'}\n\n```{.r .cell-code}\n#pdf(\"paths.pdf\", width = 8, height = 4)\n\n\n\n#lapply(data, plotpattern)\n```\n:::\n\n\n\n\n\n\n\n\n\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n    \nParvin's answer: Before this blog, I just knew the aggregate, apply, lapply, sapply, tapply, filter, mutate, group_by, etc. These functions are very useful to work with data set similar to \"baseball\" but I noticed that they may not be enough efficient for the split-apply-combine strategy. When we have a big data set that includes many features, and it has several records for one unique observation (like the one we see in the baseball that there are multiple records for each player), it is hard to implement the split-apply-combine strategy using the base R functions. I found the plyr package very useful.\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\n    \n>    The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science to analyze grouped data. It consists of three steps:\n>\n>    Split: The data is first split into groups based on one or more variables of interest.\n>\n>    Apply: A specific operation or function is applied to each group of data, usually for the purpose of aggregating, summarizing, or transforming the data within each group.\n>\n> Combine: The results of the operation applied to each group are then combined and returned as a single output.\n>\n> The split-apply-combine paradigm is particularly useful in cases where the data cannot be analyzed as a whole and instead must be analyzed in smaller, more manageable chunks. This allows for more efficient data processing and improved scalability. The paradigm is commonly implemented using tools such as the \"groupby\" function in the R and Python programming languages, and the \"dplyr\" library in R.\n\n\n\nParvin's answer: \npotential first change: The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science to transform and analyze large grouped data. It consists of main three steps:\n\npotential second change: Split: The first step is to split the data into smaller, more manageable subsets. This is typically done based on one or more categorical variables that are present in the data. For example, you might split a customer database into subsets based on demographic characteristics, such as age or gender.\n\npotential third change: Apply: The second step is to apply a function or calculation to each subset of data. This function should be able to operate on the data independently, without requiring any knowledge of the other subsets. The function can be any type of operation, such as a statistical summary, a calculation, or a transformation of the data.\n\npotential fourth change: Combine: The final step is to combine the results of the applied function back together into a single result. This is typically done by aggregating the results in some way, such as taking the mean or sum of the results for each subset.\n\npotential fifthe change: Overall, the split-apply-combine paradigm is a powerful approach for analyzing large data sets because it allows for complex calculations and operations to be performed on the data without requiring a full scan of the entire data set. It can also be easily parallelized, which makes it an efficient approach for analyzing large data sets on distributed computing platforms.\n\nYou can write your answers directly the `README.Rmd` file. \nMake sure that the file knits (you will need to activate any packages your use in your code chunks with a call to `library(xxx)`, where xxx is the name of the package, such as `plyr` ).\nCommit your changes and push to your repo;  add any files in the `README_files` directory to your repository. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}