{
  "hash": "15cf53a5dcdeb3eb7d3eda6c1eee400a",
  "result": {
    "markdown": "---\nauthor: \"yc bai\"\ntitle: \"Split-apply-combine\"\ncategories: Split-apply-combine\ndate: 2023-02-16\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_f177ec49df227f6fc67c5adf1f5c1399'}\n\n```{.r .cell-code}\nlibrary(plyr)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_b45fa58dcf6d069762bc2504f8e3ed8c'}\n\n```{.r .cell-code}\n#plyr example\nbaseball_plyr <- ddply(baseball, .(id), transform, \n  cyear = year - min(year) + 1)\n#using dplyr \nbaseball_dplyr = baseball %>% group_by(id) %>% mutate(cyear = year - min(year) + 1) %>%\n  arrange(id) %>% as.data.frame()\n```\n:::\n\n**Head of 'plyr' result**\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_42a4d29f585a699dffe0250718786267'}\n\n```{.r .cell-code}\nhead(baseball_plyr)\n#>          id year stint team lg   g  ab   r   h X2b X3b hr rbi sb cs bb so ibb\n#> 1 aaronha01 1954     1  ML1 NL 122 468  58 131  27   6 13  69  2  2 28 39  NA\n#> 2 aaronha01 1955     1  ML1 NL 153 602 105 189  37   9 27 106  3  1 49 61   5\n#> 3 aaronha01 1956     1  ML1 NL 153 609 106 200  34  14 26  92  2  4 37 54   6\n#> 4 aaronha01 1957     1  ML1 NL 151 615 118 198  27   6 44 132  1  1 57 58  15\n#> 5 aaronha01 1958     1  ML1 NL 153 601 109 196  34   4 30  95  4  1 59 49  16\n#> 6 aaronha01 1959     1  ML1 NL 154 629 116 223  46   7 39 123  8  0 51 54  17\n#>   hbp sh sf gidp cyear\n#> 1   3  6  4   13     1\n#> 2   3  7  4   20     2\n#> 3   2  5  7   21     3\n#> 4   0  0  3   13     4\n#> 5   1  0  3   21     5\n#> 6   4  0  9   19     6\n```\n:::\n\n**Head of 'dplyr' result**\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_0f352209b70d0f6dad015e87ea4f7ea1'}\n\n```{.r .cell-code}\nhead(baseball_dplyr)\n#>          id year stint team lg   g  ab   r   h X2b X3b hr rbi sb cs bb so ibb\n#> 1 aaronha01 1954     1  ML1 NL 122 468  58 131  27   6 13  69  2  2 28 39  NA\n#> 2 aaronha01 1955     1  ML1 NL 153 602 105 189  37   9 27 106  3  1 49 61   5\n#> 3 aaronha01 1956     1  ML1 NL 153 609 106 200  34  14 26  92  2  4 37 54   6\n#> 4 aaronha01 1957     1  ML1 NL 151 615 118 198  27   6 44 132  1  1 57 58  15\n#> 5 aaronha01 1958     1  ML1 NL 153 601 109 196  34   4 30  95  4  1 59 49  16\n#> 6 aaronha01 1959     1  ML1 NL 154 629 116 223  46   7 39 123  8  0 51 54  17\n#>   hbp sh sf gidp cyear\n#> 1   3  6  4   13     1\n#> 2   3  7  4   20     2\n#> 3   2  5  7   21     3\n#> 4   0  0  3   13     4\n#> 5   1  0  3   21     5\n#> 6   4  0  9   19     6\n```\n:::\n\n**Results are identical**\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_46acb75483d7282c1a8996657a8c3f8f'}\n\n```{.r .cell-code}\nall.equal(baseball_plyr, baseball_dplyr)\n#> [1] TRUE\n```\n:::\n\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n\n**I know the functions 'apply', 'lapply', 'sapply' and 'vapply' support the split-apply-combine strategy. But the input of 'apply' can only be an array, and the inputs for 'lapply', 'sapply' and 'vapply' are a vector. So it's not sufficient. Packages like 'plyr' and 'dplyr' can take in more types of data and the functions are more flexible. For example, you can specify variables on which the data is split. But you can only split the data by row or by column in 'apply'.**\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\n    \n>    The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science ~~to analyze grouped data~~. It consists of three steps:\n>\n>    Split: The data is first split into groups based on one or more variables of interest, **or split into pieces based on a given splitting scheme**.\n>\n>    Apply: A specific operation or function is applied to each **piece** ~~group~~ of data **independently**, usually for the purpose of aggregating, summarizing, **modeling**, or transforming the data within each group.\n>\n> Combine: The results of the operation applied to each **piece** ~~group~~ are then combined and returned as a single output.\n>\n> The split-apply-combine paradigm is particularly useful in cases where the data cannot be analyzed as a whole and instead must be analyzed in smaller, more manageable chunks, **or you want to apply the same operations on each piece of data**. This allows for more efficient data processing and improved scalability. The paradigm is commonly implemented using tools such as the \"groupby\" function in ~~the R and~~ Python ~~programming languages~~, and the \"dplyr\" library in R.\n\n\n\nYou can write your answers directly the `README.Rmd` file. \nMake sure that the file knits (you will need to activate any packages your use in your code chunks with a call to `library(xxx)`, where xxx is the name of the package, such as `plyr` ).\nCommit your changes and push to your repo;  add any files in the `README_files` directory to your repository. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}