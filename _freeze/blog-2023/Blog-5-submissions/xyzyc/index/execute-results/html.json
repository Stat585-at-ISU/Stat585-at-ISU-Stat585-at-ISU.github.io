{
  "hash": "75a7266f9dc587ebd3858542777a865b",
  "result": {
    "markdown": "---\nauthor: \"Yingchao Zhou\"\ndate: \"2023-02-23\"\ntitle: \"Keep track of results and data\"\ncategories: \"Ethics and Reproducibility...\"\n---\n\n\n![Frontmatter check](https://github.com/Stat585-at-ISU/Blog-5/actions/workflows/check-yaml.yaml/badge.svg)\n\n\n## Prompt:\n\nIn May 2015 Science retracted - without consent of the lead author - a paper on  how canvassers can sway people's opinions about gay marriage, \nsee also: http://www.sciencemag.org/news/2015/05/science-retracts-gay-marriage-paper-without-agreement-lead-author-lacour\nThe Science Editor-in-Chief cited as reasons for the retraction that the original survey data was not made available for independent reproduction of results, that survey incentives were misrepresented and that statements made about sponsorships turned out to be incorrect.<br>\nThe investigation resulting in the retraction was triggered by two  Berkeley grad students who attempted to replicate the study and discovered that the data must have been faked.\n \n[FiveThirtyEight](https://fivethirtyeight.com/features/how-two-grad-students-uncovered-michael-lacour-fraud-and-a-way-to-change-opinions-on-transgender-rights/) has published an article with more details on the two Berkeley students' work.\n\nMalicious changes to the data such as in the LaCour case are hard to prevent, but more rigorous checks should be built into the scientific publishing system. All too often papers have to be retracted for unintended reasons. [Retraction Watch](https://retractionwatch.com/) is a data base that keeps track of retracted papers (see the related [Science magazine](https://www.sciencemag.org/news/2018/10/what-massive-database-retracted-papers-reveals-about-science-publishing-s-death-penalty) publication). \n\nRead the paper [Ten Simple Rules for Reproducible Computational Research](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003285) by Sandve et al.\n\n\nWrite a blog post addressing the questions: \n\n1. Pick one of the papers from Retraction Watch that were retracted because of errors in the paper (you might want to pick a paper from the set of featured papers, because there are usually more details available). Describe what went wrong. Would any of the rules by Sandve et al. have helped in this situation?\n\nI picked a research article \"Optimization Method of Sports Service Network Node Layout Based on Network Communication\" in social science area. The reasons for retraction are concerns about data, image and unreliable data.\n\nThe journal \"Security and Communication Networks\" found out that a graph that was unrelated to this paper was submitted to the journal, which had appeared in several other submissions, all with text claiming to have generated the graph. This raised the concerns about the authenticity of data. \n\nAfter communication, the authors claimed they had duplicated the graph by accident, but could not provide their raw data or further evidence.\n\nThe rules \"1. For Every Result, Keep Track of How It Was Produced\", and \"7. Always Store Raw Data behind Plots\" can be helpful in this case. If there is a clean record of data, code and generated files, this kind of mistake may be avoided. Even if a submission mistake happens, there could be evidence for the correctness of the results.\n\n\n2. After reading the paper by Sandve et al. describe which rule you are most likely to follow and why, and which rule you find the hardest to follow and will likely not (be able to) follow in your future projects.\n\nMost likely to follow: Always Store Raw Data behind Plots. I store some results as .RData files and put appropriate names to indicated what   plots/tables they generate. This avoids re-running the code and allows me to check back easily. I should use this along with version control of the code. Actually, I think I should store intermediate results too. Sometimes I write too many steps as a single function and only output the final result. This makes it hard to check the behavior of the program. \n\nHard to follow: Archive the Exact Versions of All External Programs Used. I don't really know how to do this except recording the name and version of the program.\n\n\n## Submission\n\n1. Push your changes to your repository. \n\n2. You are ready to call it good, once all your github actions pass without an error. You can check on that by selecting 'Actions' on the menu and ensure that the last item has a green checkmark. The action for this repository checks the yaml of your contribution for the existence of the author name, a title, date and categories. Don't forget the space after the colon!\nOnce the action passes, the badge along the top will also change its color accordingly. \nAs of right now, the status for the YAML front matter is:\n\n![Frontmatter check](https://github.com/Stat585-at-ISU/Blog-5/actions/workflows/check-yaml.yaml/badge.svg)\n\n\n```\n---\nauthor: \"Your Name\"\ntitle: \"Specify your title\"\ndate: \"2023-02-23\"\ncategories: \"Ethics and Reproducibility...\"\n---\n```\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}