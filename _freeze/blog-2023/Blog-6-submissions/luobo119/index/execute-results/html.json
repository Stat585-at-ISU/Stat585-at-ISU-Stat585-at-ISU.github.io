{
  "hash": "b3211317db56eb80962a6b405cfa5b7b",
  "result": {
    "markdown": "---\nauthor: \"yc bai\"\ntitle: \"renv package\"\ncategories: \"More on reproducibility...\"\ndate: \"2023-03-02\"\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n<!-- badges: start -->\n[![Frontmatter check](../../actions/workflows/check-yaml.yaml/badge.svg)](../../actions/workflows/check-yaml.yaml)\n[![Render rmarkdown](../../actions/workflows/render-rmarkdown.yaml/badge.svg)](../../actions/workflows/render-rmarkdown.yaml)\n<!-- badges: end -->\n\nWhat happens when we change the Rmd file and commit?\n\nIn Blog 5 you had the first exposure to Github Actions. \nWe just checked frontmatter compliance (as we do for this round).\nYou see that we have added a second action - here, we are converting the Rmarkdown document to a markdown file by running `render_rmarkdown` on Github. This action passes successfully for this document. We want to do something similar for blog #4.\n\n\nNow start reading ...\n\n\nRead the vignette [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html) for the `renv` R package by Kevin Ushey.\n\nThen do:\n\n1. **Install the R package `renv` on your local machine.**\n\n2. **In the project for blog 4, initialize the workflow used by the `renv` package.**\n\n3. **Add all dependencies to the environment (implicitly by installing all the depepndencies or explicilty by listing dependencies in a DESCRIPTION file).**\n\n4. **Add the `renv` folder to your blog 4 repository, and push the changes.**\n\n5. **Is the github action working? Read any potential error messages in the workflow and try to fix things. Make sure to check stackoverflow for help, don't forget our Discussion board!**\n\n\nWrite a blog post addressing the following questions: \n\n1. **What is the idea of the renv package?**\n\n'renv' package is a tool to help create project-local libraries. It records all packages used in the project and also saved the states of these libraries. It isolates the project library from the system environment, which makes packages used in the project reproducible. By using the 'snapshot' function, the state of the project’s library will be saved in a lockfile. By using 'restore', the state of the project’s library can be restored.\n\n2. **In 50 to 100 words describe your experience working with `renv`. What went well? What did not go so well?**\n\nBy following the workflow in 'renv' package website, I could successfully create 'renv' folder and see the dependencies used in blog 4 in the 'renv.lock' file. I run into problems when I try to figure out whether packages 'dplyr' and 'plyr' are recorded by using renv, but it turns out that they are automatically recorded by using 'renv::snapshot()', and many other base R packages I didn't know I used have also been recorded.\n \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}