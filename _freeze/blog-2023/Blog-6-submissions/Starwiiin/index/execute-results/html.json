{
  "hash": "f69122d31952db0ea5f4cde4276168b3",
  "result": {
    "markdown": "---\nauthor: \"Parvin Mohammadiarvejeh\"\ntitle: \"More on reproducibility...\"\ncategories: \"More on reproducibility...\"\ndate: \"2023-03-02\"\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n<!-- badges: start -->\n[![Frontmatter check](../../actions/workflows/check-yaml.yaml/badge.svg)](../../actions/workflows/check-yaml.yaml)\n[![Render rmarkdown](../../actions/workflows/render-rmarkdown.yaml/badge.svg)](../../actions/workflows/render-rmarkdown.yaml)\n<!-- badges: end -->\n\nWhat happens when we change the Rmd file and commit?\n\nIn Blog 5 you had the first exposure to Github Actions. \nWe just checked frontmatter compliance (as we do for this round).\nYou see that we have added a second action - here, we are converting the Rmarkdown document to a markdown file by running `render_rmarkdown` on Github. This action passes successfully for this document. We want to do something similar for blog #4.\n\n\nNow start reading ...\n\n\nRead the vignette [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html) for the `renv` R package by Kevin Ushey.\n\nThen do:\n\n1. **Install the R package `renv` on your local machine.**\n\n2. **In the project for blog 4, initialize the workflow used by the `renv` package.**\n\n3. **Add all dependencies to the environment (implicitly by installing all the depepndencies or explicilty by listing dependencies in a DESCRIPTION file).**\n\n4. **Add the `renv` folder to your blog 4 repository, and push the changes.**\n\n5. **Is the github action working? Read any potential error messages in the workflow and try to fix things. Make sure to check stackoverflow for help, don't forget our Discussion board!**\n\n\nWrite a blog post addressing the following questions: \n\n1. **What is the idea of the renv package?**\nParvin's answer: renv package is an useful package to install, update and manage packages in various projects in a more robust way. In the other words, using renv, we can update/install packages in a specific project without any changes in the packages in the other projects. This advantage is useful to prevent conflicts when we work on the other projects;it means that other projects do not break (it is like a private library and environment). Furthermore, renv provides the ability to reproduce the previous versions of our work. In summary, renv provides a better management in projects individually. \n\n2. **In 50 to 100 words describe your experience working with `renv`. What went well? What did not go so well?**\nParvin's answer: My experience with renv package was smooth, fortunately. Using the instruction in the \"Introduction to renv\" I could get it done with a few number of committing. In the first rounds, I forgot to use \"hydrate()\" function and it did not work, but when I read the instruction again, I did the process again, step by step and I called the hydrate and it worked!\n\n\nSubmit this blog post to your blog-6 repo. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}