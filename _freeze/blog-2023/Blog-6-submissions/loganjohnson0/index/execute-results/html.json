{
  "hash": "b405bedc03abc16195ae3d2f5f76954d",
  "result": {
    "markdown": "---\noutput: github_document\ntitle: \"'renv' Package and Data Reproducibility\"\nauthor: \"Logan Johnson\"\ndate: \"2023-03-02\"\ncategories: \"More on reproducibility...\"\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n<!-- badges: start -->\n[![Frontmatter check](../../actions/workflows/check-yaml.yaml/badge.svg)](../../actions/workflows/check-yaml.yaml)\n[![Render rmarkdown](../../actions/workflows/render-rmarkdown.yaml/badge.svg)](../../actions/workflows/render-rmarkdown.yaml)\n<!-- badges: end -->\n\nWhat happens when we change the Rmd file and commit?\n\nIn Blog 5 you had the first exposure to Github Actions. \nWe just checked frontmatter compliance (as we do for this round).\nYou see that we have added a second action - here, we are converting the Rmarkdown document to a markdown file by running `render_rmarkdown` on Github. This action passes successfully for this document. We want to do something similar for blog #4.\n\n\nNow start reading ...\n\n\nRead the vignette [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html) for the `renv` R package by Kevin Ushey.\n\nThen do:\n\n1. **Install the R package `renv` on your local machine.**\n\n2. **In the project for blog 4, initialize the workflow used by the `renv` package.**\n\n3. **Add all dependencies to the environment (implicitly by installing all the depepndencies or explicilty by listing dependencies in a DESCRIPTION file).**\n\n4. **Add the `renv` folder to your blog 4 repository, and push the changes.**\n\n5. **Is the github action working? Read any potential error messages in the workflow and try to fix things. Make sure to check stackoverflow for help, don't forget our Discussion board!**\n\n\nWrite a blog post addressing the following questions: \n\n1. **What is the idea of the renv package?**\n\nThe renv package allows you to create different R libraries of different packages. Essentially, this allows one to designate the specific package version that is used in the workflow. This way, any new updates or changes can be ignored because renv creates a project specific library of packages and calls specific version of packages to avoid any changes that may break or cause errors with previous code.\n\n2. **In 50 to 100 words describe your experience working with `renv`. What went well? What did not go so well?**\n\nI think this package is a beneficial package. I think it helps to save the version associated with the code as often times with various updates, the package version number is likely to be the last thing that might be remembered when working on the project. I had an easy time getting it to work. A challenge was understanding what exactly the package was doing, what the files it was saving were, and how to add packages to the local library and work with that. I also had issues with getting the GitHub Actions render-rmarkdown to run successfully. I installed the \"curl\" through command line to get \"libcurl\" working. \n \n\nSubmit this blog post to your blog-6 repo. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}