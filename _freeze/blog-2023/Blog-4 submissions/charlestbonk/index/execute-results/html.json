{
  "hash": "68c77f6baa6bb82f2aa8f708b0f6ca66",
  "result": {
    "markdown": "---\nauthor: \"Not Charlie\"\ntitle: \"Title of your post\"\ncategory: Split-apply-combine\ndate: 2022-02-16\noutput: github_document\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n## Prompt:\n\nThe `plyr` package has by now been replaced by other, even faster\npackages, but the idea of *Split, apply, combine* is as relevant as\never.\n\nRead the paper [The Split-Apply-Combine Strategy for Data\nAnalysis](https://www.jstatsoft.org/article/view/v040i01) by Hadley\nWickham.\n\nWrite a blog post addressing the following questions:\n\n1.  The R code for the split-apply-combine paper is posted with the\n    paper. Pick one of the examples demonstrating `plyr` functionality\n    (such as `dlply` or `ddply`, ...) and rewrite the example using\n    functionality from the package `dplyr`. Make sure that your example\n    works and the results are identical.\n    \n    - I used the Baseball example with calculating the `cyear`.\n    \n\n::: {.cell warnring='false' hash='index_cache/html/unnamed-chunk-2_f77c565495e76860bf15db3a77dca192'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\noptions(digits = 3)\n#options(prompt = \"R> \")\nbrightblue <- rgb(102, 204, 255, max = 255)\n\n# ----------------------------\n\n# Base ball case study ============================================\nbaberuth <- subset(plyr::baseball, id == \"ruthba01\")\nbaberuth <- transform(baberuth, cyear = year - min(year) + 1)\n\n\n# ----------------------------\n## The Original Code\nlibrary(plyr)\nbaseball.plyr <- ddply(baseball, .(id), transform, \n  cyear = year - min(year) + 1)\n## Making this a Dplyr Code\nbaseball.dplyr <- baseball%>%group_by(id)%>%mutate(cyear = year - min(year) + 1)\n```\n:::\n\n\n\n2.  Which (base R) functions do you know that support the\n    split-apply-combine strategy? In your opinion, are these sufficient?\n    State why or why not?\n    - All of the *apply() functions (like `lapply()`, `mapply()`, `sapply()`, etc) can help with the apply part of the split-apply-combine strategy.\n    - We could also use concatination functions, like `cbind()` and `rbind()`\n    - We can finally use functions like `$` to separate in base R.\n\n\n3. The ChatGPT response to the prompt \"Describe the split-apply-combine paradigm\" is given below. Generally, the chatbot's answers are decent. ChatGPT does have problems getting details right. Which details would you change in the response? \n\n    \n>    The \"split-apply-combine\" paradigm is a data analysis strategy used in statistics and data science to analyze grouped data. It consists of three steps:\n>\n>    Split: The data is first split into groups based on one or more variables of interest.\n>\n>    Apply: A specific operation, function, or a group of functions is applied to each group of data, usually for the purpose of aggregating, summarizing, or transforming the data within each group.\n>\n> Combine: The results of the operation applied to each group are then combined and returned as a single output.\n>\n> The split-apply-combine paradigm is particularly useful in cases where the data cannot be analyzed as a whole and instead must be analyzed in smaller, more manageable chunks. The slipt-apply-combine paradigm is also useful when the data must have multiple functions applied to one another. This allows for more efficient data processing and improved scalability. The paradigm is commonly implemented using tools such as the \"group_by\" function in the R and Python programming languages, and the \"dplyr\" library in R.\n\n\nYou can write your answers directly the `README.Rmd` file. \nMake sure that the file knits (you will need to activate any packages your use in your code chunks with a call to `library(xxx)`, where xxx is the name of the package, such as `plyr` ).\nCommit your changes and push to your repo;  add any files in the `README_files` directory to your repository. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}