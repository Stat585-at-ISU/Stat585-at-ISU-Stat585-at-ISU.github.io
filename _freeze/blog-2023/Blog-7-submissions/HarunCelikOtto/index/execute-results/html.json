{
  "hash": "b0c8b8c72ea1ab431ed217b659f12c90",
  "result": {
    "markdown": "---\nauthor: \"Harun Celik\"\ntitle: \"Split-Apply-Combine Post\"\ncategories: \"All that legal stuff...\"\ndate: \"2023-03-09\"\noutput:\n  html_document: default\n  github_document: default\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n\n<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n<!-- badges: start -->\n\n[![Frontmatter\ncheck](../../actions/workflows/check-yaml.yaml/badge.svg)](../../actions/workflows/check-yaml.yaml)\n[![Render\nrmarkdown](../../actions/workflows/render-rmarkdown.yaml/badge.svg)](../../actions/workflows/render-rmarkdown.yaml)\n\n<!-- badges: end -->\n\n## Prompt:\n\nThe `DESCRIPTION` file of a package contains the package's meta\ninformation. Most of the fields in this file are quite straight forward:\nauthor, version number, and a short package description. When you call\n`library(help=\"<package name>\")` for package `<package name>` you can\nsee the contents of the `DESCRIPTION` file for that package (and some\nparts of the `NAMESPACE` file).\n\nRead through Colin Fay's (short) book on [Licensing\nR](https://thinkr-open.github.io/licensing-r/)\n\nWrite a blog post addressing the following questions:\n\n### Under what license does R operate? What is the license for ggplot2?\n\nRunning `license()` shows us that R operates under the GNU General\nPublic License for both Version 2 and Version 3. Running `?ggplot2`\nshows that the copyright holder is with RStudio and the CRAN repository\nfor the package indicates that gpplot2 operates under the MIT + file\nLICENSE.\n\n### What are the dependencies of the package you made?\n\nThe following are the dependencies of our package based on our manual\naddition of the `usethis` package:\n\n-   dplyr - MIT + file LICENSE (formerly GPL license)\n\n-   lubridate - GNU GPL (\\>=2) (it would be interesting to see what\n    happens to this now that it will roll with tidyverse)\n\n-   readr - MIT + file LICENSE\n\n-   purrr - MIT + file LICENSE\n\n-   stringr - MIT + file LICENSE\n\n-   tabulizer - MIT + file LICENSE\n\nWe can check all of the dependencies with a custom function that filters\nthrough CRAN database since most of the these are on CRAN.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_01608a507b070c70bf6ceb448fd45d33'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\npkgdb <- tools::CRAN_package_db()\n```\n:::\n\n\nThe author of the book suggested using `{pkgnet}` but I had trouble\nunderstanding exactly what the custom function was doing there so I just\nfiltered through the `pkgdb` data and output the items as a list for\nlegibility. This will show the dependencies, imports and suggests for\neach package listed above.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_8bf4c05e7b4e7cc1505804a55b5a3287'}\n\n```{.r .cell-code}\nget_deps <- function(pkg) {\n  pkgdb %>%\n    select(Package, Depends, Imports, Suggests) %>%\n    filter(Package == pkg) %>%\n    as.list()\n}\n\nget_deps(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\n[1] \"dplyr\"\n\n$Depends\n[1] \"R (>= 3.4.0)\"\n\n$Imports\n[1] \"cli (>= 3.4.0), generics, glue (>= 1.3.2), lifecycle (>=\\n1.0.3), magrittr (>= 1.5), methods, pillar (>= 1.5.1), R6,\\nrlang (>= 1.0.6), tibble (>= 2.1.3), tidyselect (>= 1.2.0),\\nutils, vctrs (>= 0.5.2)\"\n\n$Suggests\n[1] \"bench, broom, callr, covr, DBI, dbplyr (>= 2.2.1), ggplot2,\\nknitr, Lahman, lobstr, microbenchmark, nycflights13, purrr,\\nrmarkdown, RMySQL, RPostgreSQL, RSQLite, stringi (>= 1.7.6),\\ntestthat (>= 3.1.5), tidyr (>= 1.3.0), withr\"\n```\n:::\n\n```{.r .cell-code}\nget_deps(\"lubridate\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\n[1] \"lubridate\"\n\n$Depends\n[1] \"methods, R (>= 3.2)\"\n\n$Imports\n[1] \"generics, timechange (>= 0.1.1)\"\n\n$Suggests\n[1] \"covr, knitr, rmarkdown, testthat (>= 2.1.0), vctrs (>= 0.5.0)\"\n```\n:::\n\n```{.r .cell-code}\nget_deps(\"purrr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\n[1] \"purrr\"\n\n$Depends\n[1] \"R (>= 3.4.0)\"\n\n$Imports\n[1] \"cli (>= 3.4.0), lifecycle (>= 1.0.3), magrittr (>= 1.5.0),\\nrlang (>= 0.4.10), vctrs (>= 0.5.0)\"\n\n$Suggests\n[1] \"covr, dplyr (>= 0.7.8), httr, knitr, lubridate, rmarkdown,\\ntestthat (>= 3.0.0), tibble, tidyselect\"\n```\n:::\n\n```{.r .cell-code}\nget_deps(\"readr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\n[1] \"readr\"\n\n$Depends\n[1] \"R (>= 3.5)\"\n\n$Imports\n[1] \"cli (>= 3.2.0), clipr, crayon, hms (>= 0.4.1), lifecycle (>=\\n0.2.0), methods, R6, rlang, tibble, utils, vroom (>= 1.6.0)\"\n\n$Suggests\n[1] \"covr, curl, datasets, knitr, rmarkdown, spelling, stringi,\\ntestthat (>= 3.1.2), tzdb (>= 0.1.1), waldo, withr, xml2\"\n```\n:::\n\n```{.r .cell-code}\nget_deps(\"stringr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\n[1] \"stringr\"\n\n$Depends\n[1] \"R (>= 3.3)\"\n\n$Imports\n[1] \"cli, glue (>= 1.6.1), lifecycle (>= 1.0.3), magrittr, rlang\\n(>= 1.0.0), stringi (>= 1.5.3), vctrs\"\n\n$Suggests\n[1] \"covr, htmltools, htmlwidgets, knitr, rmarkdown, testthat (>=\\n3.0.0)\"\n```\n:::\n\n```{.r .cell-code}\n# Not surprisingly tabulizer doesn't return any values since it is not on CRAN\nget_deps(\"tabulizer\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Package\ncharacter(0)\n\n$Depends\ncharacter(0)\n\n$Imports\ncharacter(0)\n\n$Suggests\ncharacter(0)\n```\n:::\n:::\n\n\nFor `tabulizer`, we will need to get this information from the github\nrepository for the package in the DESCRIPTION file. The only way I've thought of \nbeing able to access this is through the URL but I don't think this is modular enough\nfor all packages installed on github with differing remote urls. The `{desc}` package\nseems only helpful for manipulating already documented DESCRIPTION files, while the `{remotes}`\npackage seems to provide options for installation, I could not figure out how to\nretrieve the DESCRIPTION data for a particular package :( \n\nRead through [chapter 5.2 of Licensing\nR](https://thinkr-open.github.io/licensing-r/practical.html#dependencies-exploration).\nCombine and adjust the code pieces to create the dependencies for a\npackage that is on github rather than CRAN. (Don't forget about the\npackage `desc`.) What dependencies does the package have that you\ncreated for Lab-3? Which licenses are involved? Are all of these\ndependencies required? Elaborate.\n\nUnder which license should this blog post be published? Make sure that\nyou are using an appropriate license. (You can change the current\nlicenses with the help of commands from the `use_license_XXX` family in\nthe `usethis` package)\n\nThis blog currently is operating under the Creative Commons Legal Code CC0 1.0 \nUniversal license. It does use RMarkdown which operates under the GNU General\nPublic License and the GNU recommends that the license be distributed in the form\nof a GPL. To change this, we can use the `{usethis}` package.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_de059c0983b5cb582479f88743133e36'}\n\n```{.r .cell-code}\nlibrary(\"usethis\")\nusethis::use_gpl_license(version = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Setting active project to '/Users/hofmann/Documents/Teaching/Stat 585/Spring 2023/Stat585-at-ISU.github.io'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to 'blog-2023/Blog-7-submissions/HarunCelikOtto/.Rbuildignore'\n```\n:::\n:::\n\nThis package is now licensed by GPL Version 4. This can be checked in the `License.md`\nfile.\n\n### Can I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nWhen confronted with the above question, ChatGPT gave two -- quite\ndifferent -- responses, as shown below. The main point in both responses\nis 'your package may be considered derivative work'. At the specific\nproblem of the package developed for Lab 3, what is your opinion about\npotential copyright infringements when releasing the package with an MIT\nlicense? Make sure to take the relevant passage in Colin Fay's book\nunder consideration.\n\n    The legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\n    However, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\n    That being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\n    It is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\n    In summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\n\nAfter harping a bit on copyright infringement in general, ChatGPT\nchanged its response to\n\n    Technically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\n    The GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\n    The MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\n    Publishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\n\nThe 'harping' questions:\n\n-   Is it legal to publish an R package on CRAN under an MIT license\n    when I have a dependency on a package that is licensed under GPL-3?\n\n-   Is it illegal to publish an R package on CRAN under an MIT license\n    when I have a dependency on a package that is licensed under GPL-3?\n\n-   Is it a copyright infringement to publish an R package on CRAN under\n    an MIT license when I have a dependency on a package that is\n    licensed under GPL-3?\n\n-   Can I publish an R package on CRAN under an MIT license when I have\n    a dependency on a package that is licensed under GPL-3 without\n    infringing copyright?\n\n## Submission\n\nWrite answers to the questions directly into the file `README.Rmd`. Push\nthe blog post to your blog-7 repo. Make sure that all of the checks are\npassing.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}