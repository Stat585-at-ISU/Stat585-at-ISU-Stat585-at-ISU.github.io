[
  {
    "objectID": "blog-2023/Blog-5-submissions/Landon-Getting/index.html",
    "href": "blog-2023/Blog-5-submissions/Landon-Getting/index.html",
    "title": "TREEFINDER - Leveraging Research Software for Political Agendas",
    "section": "",
    "text": "Frontmatter check"
  },
  {
    "objectID": "blog-2023/Blog-5-submissions/Landon-Getting/index.html#prompt",
    "href": "blog-2023/Blog-5-submissions/Landon-Getting/index.html#prompt",
    "title": "TREEFINDER - Leveraging Research Software for Political Agendas",
    "section": "Prompt:",
    "text": "Prompt:\nIn May 2015 Science retracted - without consent of the lead author - a paper on how canvassers can sway people’s opinions about gay marriage, see also: http://www.sciencemag.org/news/2015/05/science-retracts-gay-marriage-paper-without-agreement-lead-author-lacour The Science Editor-in-Chief cited as reasons for the retraction that the original survey data was not made available for independent reproduction of results, that survey incentives were misrepresented and that statements made about sponsorships turned out to be incorrect. The investigation resulting in the retraction was triggered by two Berkeley grad students who attempted to replicate the study and discovered that the data must have been faked.\nFiveThirtyEight has published an article with more details on the two Berkeley students’ work.\nMalicious changes to the data such as in the LaCour case are hard to prevent, but more rigorous checks should be built into the scientific publishing system. All too often papers have to be retracted for unintended reasons. Retraction Watch is a data base that keeps track of retracted papers (see the related Science magazine publication).\nRead the paper Ten Simple Rules for Reproducible Computational Research by Sandve et al.\nWrite a blog post addressing the questions:\n\nPick one of the papers from Retraction Watch that were retracted because of errors in the paper (you might want to pick a paper from the set of featured papers, because there are usually more details available). Describe what went wrong. Would any of the rules by Sandve et al. have helped in this situation?\n\nI choose to examine ‘TREEFINDER: a powerful graphical analysis environment for molecular phylogenetics’ which is a collaboration between 3 authors: Jobb, Haeseler, and Strimmer [1]. Although this paper remains of Retraction Watch’s ’Top 10 most highly cited retracted papers’, the reason for its retraction was unexpected. The first author, Gangolf Jobb, decided to limit the software license geographically which made the software unavailable for some scientists [2]. According to an article in the journal Science, Jobb specifically excluded European countries which immigration policies that he disagreed with [3].\nThis action violated the rules of the journal and therefore the article was retracted. Haeseler and Strimmer, the other two authors, were unable to influence the software licensing changes and agreed with the retraction. In a paper from the University of Nebraska evaluating the Retraction Watch list, researchers determined the results to be valid despite the retraction [4].\nIdeally, all of the authors would have subscribed to Rule 10 from Sandve et al and provided public access to scripts, runs, and results. However, since one of the authors decided not to adhere to this rule, it is difficult to determine other rules which may have prevented the retraction. Depending on the legal ownership of the software, the other authors could have followed Rule 3 and released an older version of the software for public use.\n\nAfter reading the paper by Sandve et al. describe which rule you are most likely to follow and why, and which rule you find the hardest to follow and will likely not (be able to) follow in your future projects.\n\nI am most likely to follow Rule 7 and store the raw data utilized for plots. As described by Sandve, this can be naturally followed if utilizing a system like R to generate visuals which I plan to utilize. I believe Rule 3 may be the hardest to follow. Even if I archive the exact versions of all external programs used in a system like CyBox, the university may move to a new system in a few years and the programs may be lost. Setting up a contingency plan for storing files and programs in the long term may be difficult and even unnecessary if the pace of current research surpasses my work prior to degradation of a short term plan. However, I will follow the rules to the best of my ability!"
  },
  {
    "objectID": "blog-2023/Blog-5-submissions/Landon-Getting/index.html#citations",
    "href": "blog-2023/Blog-5-submissions/Landon-Getting/index.html#citations",
    "title": "TREEFINDER - Leveraging Research Software for Political Agendas",
    "section": "Citations",
    "text": "Citations\n[1] Jobb, G., von Haeseler, A. & Strimmer, K. RETRACTED ARTICLE: TREEFINDER: a powerful graphical analysis environment for molecular phylogenetics. BMC Evol Biol 4, 18 (2004). https://doi.org/10.1186/1471-2148-4-18\n[2] https://bmcecolevol.biomedcentral.com/articles/10.1186/s12862-015-0513-z\n[3] https://www.science.org/content/article/paper-retracted-after-scientist-bans-use-his-software-countries-welcome-refugees\n[4] Jan, Rosy; Bano, Shohar; Syed, Ikhlaq ur Rehman; and Mehraj, Midhat, “Context Analysis of Top Seven Retracted Articles: ShouldRetraction Watch Revisit the List?” (2018). Library Philosophy and Practice (e-journal). 2016."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/kellynay/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/kellynay/index.html#prompt",
    "title": "R Licensing and Package Dependencies",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate?\nR operates under the license GPL-2 | GPL-3.\nSource: https://www.r-project.org/Licenses/#:~:text=R%20as%20a%20package%20is,%2C%20which%20includes%20GPL%2D3%20.\n\n\nWhat is the license for ggplot2?\n\npackageDescription(\"ggplot2\", fields=\"License\")\n\n[1] \"MIT + file LICENSE\"\n\n\n\n\nWhat are the dependencies of the package you made?\n\nPackage dependencies for Team3 according to the description file include:\n\nDepends: R (>= 2.10) Import: tabulizer, tidyr, dplyr, tibble, lubridate, RCurl\n\nLicenses involved for package Team3: MIT + file LICENSE\nAre all of these dependencies required? Not all these dependencies are required because “RCurl” was just another method used to download files from the URL address. Thus, “RCurl” is not required.\nUnder which license should this blog post be published? I am posting this blog under R’s current’s license because I would not mind sharing this this publicly.\n\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/kellynay/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/kellynay/index.html#submission",
    "title": "R Licensing and Package Dependencies",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/drbradford12/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/drbradford12/index.html#prompt",
    "title": "Stat 585",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/drbradford12/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/drbradford12/index.html#submission",
    "title": "Stat 585",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/HarunCelikOtto/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/HarunCelikOtto/index.html#prompt",
    "title": "Split-Apply-Combine Post",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nRunning license() shows us that R operates under the GNU General Public License for both Version 2 and Version 3. Running ?ggplot2 shows that the copyright holder is with RStudio and the CRAN repository for the package indicates that gpplot2 operates under the MIT + file LICENSE.\n\n\nWhat are the dependencies of the package you made?\nThe following are the dependencies of our package based on our manual addition of the usethis package:\n\ndplyr - MIT + file LICENSE (formerly GPL license)\nlubridate - GNU GPL (>=2) (it would be interesting to see what happens to this now that it will roll with tidyverse)\nreadr - MIT + file LICENSE\npurrr - MIT + file LICENSE\nstringr - MIT + file LICENSE\ntabulizer - MIT + file LICENSE\n\nWe can check all of the dependencies with a custom function that filters through CRAN database since most of the these are on CRAN.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\npkgdb <- tools::CRAN_package_db()\n\nThe author of the book suggested using {pkgnet} but I had trouble understanding exactly what the custom function was doing there so I just filtered through the pkgdb data and output the items as a list for legibility. This will show the dependencies, imports and suggests for each package listed above.\n\nget_deps <- function(pkg) {\n  pkgdb %>%\n    select(Package, Depends, Imports, Suggests) %>%\n    filter(Package == pkg) %>%\n    as.list()\n}\n\nget_deps(\"dplyr\")\n\n$Package\n[1] \"dplyr\"\n\n$Depends\n[1] \"R (>= 3.4.0)\"\n\n$Imports\n[1] \"cli (>= 3.4.0), generics, glue (>= 1.3.2), lifecycle (>=\\n1.0.3), magrittr (>= 1.5), methods, pillar (>= 1.5.1), R6,\\nrlang (>= 1.0.6), tibble (>= 2.1.3), tidyselect (>= 1.2.0),\\nutils, vctrs (>= 0.5.2)\"\n\n$Suggests\n[1] \"bench, broom, callr, covr, DBI, dbplyr (>= 2.2.1), ggplot2,\\nknitr, Lahman, lobstr, microbenchmark, nycflights13, purrr,\\nrmarkdown, RMySQL, RPostgreSQL, RSQLite, stringi (>= 1.7.6),\\ntestthat (>= 3.1.5), tidyr (>= 1.3.0), withr\"\n\nget_deps(\"lubridate\")\n\n$Package\n[1] \"lubridate\"\n\n$Depends\n[1] \"methods, R (>= 3.2)\"\n\n$Imports\n[1] \"generics, timechange (>= 0.1.1)\"\n\n$Suggests\n[1] \"covr, knitr, rmarkdown, testthat (>= 2.1.0), vctrs (>= 0.5.0)\"\n\nget_deps(\"purrr\")\n\n$Package\n[1] \"purrr\"\n\n$Depends\n[1] \"R (>= 3.4.0)\"\n\n$Imports\n[1] \"cli (>= 3.4.0), lifecycle (>= 1.0.3), magrittr (>= 1.5.0),\\nrlang (>= 0.4.10), vctrs (>= 0.5.0)\"\n\n$Suggests\n[1] \"covr, dplyr (>= 0.7.8), httr, knitr, lubridate, rmarkdown,\\ntestthat (>= 3.0.0), tibble, tidyselect\"\n\nget_deps(\"readr\")\n\n$Package\n[1] \"readr\"\n\n$Depends\n[1] \"R (>= 3.5)\"\n\n$Imports\n[1] \"cli (>= 3.2.0), clipr, crayon, hms (>= 0.4.1), lifecycle (>=\\n0.2.0), methods, R6, rlang, tibble, utils, vroom (>= 1.6.0)\"\n\n$Suggests\n[1] \"covr, curl, datasets, knitr, rmarkdown, spelling, stringi,\\ntestthat (>= 3.1.2), tzdb (>= 0.1.1), waldo, withr, xml2\"\n\nget_deps(\"stringr\")\n\n$Package\n[1] \"stringr\"\n\n$Depends\n[1] \"R (>= 3.3)\"\n\n$Imports\n[1] \"cli, glue (>= 1.6.1), lifecycle (>= 1.0.3), magrittr, rlang\\n(>= 1.0.0), stringi (>= 1.5.3), vctrs\"\n\n$Suggests\n[1] \"covr, htmltools, htmlwidgets, knitr, rmarkdown, testthat (>=\\n3.0.0)\"\n\n# Not surprisingly tabulizer doesn't return any values since it is not on CRAN\nget_deps(\"tabulizer\")\n\n$Package\ncharacter(0)\n\n$Depends\ncharacter(0)\n\n$Imports\ncharacter(0)\n\n$Suggests\ncharacter(0)\n\n\nFor tabulizer, we will need to get this information from the github repository for the package in the DESCRIPTION file. The only way I’ve thought of being able to access this is through the URL but I don’t think this is modular enough for all packages installed on github with differing remote urls. The {desc} package seems only helpful for manipulating already documented DESCRIPTION files, while the {remotes} package seems to provide options for installation, I could not figure out how to retrieve the DESCRIPTION data for a particular package :(\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nThis blog currently is operating under the Creative Commons Legal Code CC0 1.0 Universal license. It does use RMarkdown which operates under the GNU General Public License and the GNU recommends that the license be distributed in the form of a GPL. To change this, we can use the {usethis} package.\n\nlibrary(\"usethis\")\nusethis::use_gpl_license(version = 3)\n\n✔ Setting active project to '/Users/hofmann/Documents/Teaching/Stat 585/Spring 2023/Stat585-at-ISU.github.io'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to 'blog-2023/Blog-7-submissions/HarunCelikOtto/.Rbuildignore'\n\n\nThis package is now licensed by GPL Version 4. This can be checked in the License.md file.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/HarunCelikOtto/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/HarunCelikOtto/index.html#submission",
    "title": "Split-Apply-Combine Post",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/valeriehan6/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/valeriehan6/index.html#prompt",
    "title": "Licenses",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR uses a GNU General Public License (either Version 2 or Version 3). ggplot2 uses an MIT license.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nThe dependecies are dplyr, lubridate, purrr, R (>= 2.10), readr, tabulizer, and tibble.\nThey use MIT licenses for the most part with one GPL (\\(\\geq 2\\)) license. All these dependencies are required for the package as it’s currently written because we use functions from these packages in our package’s functions.\n\n# code adapted from section 5.2 of https://thinkr-open.github.io/licensing-r/practical.html\n\nlibrary(tidyr)\nlibrary(dplyr)\n\npkgdb <- tools::CRAN_package_db()\n\nextract_from_cran_db <- function(deps, pkgdb){\n  pkgdb %>%\n    as_tibble(.name_repair = \"universal\") %>%\n    filter(Package %in% deps) \n}\n\n# copied from DESCRIPTION file\ndeps <- c(\"dplyr\",\n          \"lubridate\",\n          \"purrr\",\n          \"readr\",\n          \"tabulizer\", # has MIT license (checked its github repo)\n          \"tibble\",\n          \"utils\")\n\ndeps <- extract_from_cran_db(deps, pkgdb)\n\ndeps %>%\n  count(\n    License\n  )\n\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nThis blog post should be published under the same license as the book (CC BY-NC-SA 4.0 license) since we use modified code from the book. (Note that the libraries we use for the code are all MIT-licensed.)\n\ndeps <- c(\"dplyr\",\n          \"tidyr\",\n          \"tools\")\n\ndeps <- extract_from_cran_db(deps, pkgdb)\n\ndeps %>%\n  count(\n    License\n  )\n\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nI believe the best route to take would be to publish under the more restrictive license to be safe because it seems that such a dependency is in the “borderline case” of being considered a “combined work.” The argument in the book is that we have to install the dependent packages to run our package’s functions and therefore we would be violating the GPL license. However, it seems that by using an MIT license, we would be saying our code is fine for people to use, so publishing our package under an MIT license would still allow people to use our functions that don’t depend on those GPL-licensed packages or modify code from our package to write their own functions. Essentially, I think the applying the MIT license to our package could still increase the utility for others compared to publishing with the GPL license."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/valeriehan6/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/valeriehan6/index.html#submission",
    "title": "Licenses",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/IanParzyszek/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/IanParzyszek/index.html#prompt",
    "title": "What License when?",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\n— R operates under a General Public License either version 2 from June 1991 or version 3 from June 2007. ggplot2 however runs off of an MIT license. A MIT license is a license that gives explicit consent for the users to reuse their code for any purpose.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3?\n\nusethis::use_package(“dplyr”) usethis::use_package(“tabulizer”) usethis::use_package(“lubridate”) usethis::use_package(“readr”) usethis::use_package(“stringr”)\nWhich licenses are involved? ‘dplyr’ uses an MIT license ‘tabulizer’uses an MIT license ’lubridate’ uses a GPL-2 | GPL-3 license ‘readr’ uses an MIT license ‘stringr’ uses an MIT license\nWe are using an MIT license for our package.\nAre all of these dependencies required? Elaborate.\nThe way we set up our dependecies these packages are required. However, you can set up dependencies in different ways. If you use “Imports” then you need to have that package downloaded when you install the package. Or you could have the dependencies as suggestions and it will just suggest that you download a certain package, but will not make you and will not install the package when you intall the intended package.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nFor this blog post I a using a CC-BY-SA-4.0 license. This is used for creative non-comercial purposes.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe thing that stuck out to me most about Colin Fay’s paper was the idea of whether or not the work you are creating is going to be used for commercial use. Because we are not going to be using our package for commercial use I think we should be in the clear. However, I think if we wanted to actually publish this code via CRAN we would have to also publish our code under a GPL-3 license. Even though I have found instances where there have been instances where someone has published a package with GPL dependencies under and MIT license, example being ‘memoise’\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nNo\n\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3? Yes? The legality is really unclear, is from what I understood.\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nYes\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nNo"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/IanParzyszek/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/IanParzyszek/index.html#submission",
    "title": "What License when?",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/loganjohnson0/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/loganjohnson0/index.html#prompt",
    "title": "Legal Stuff",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\n\n\nMy Responses:\n\nR\nR operates under a multitude of licenses, including either the GNU General Public License (GPL) Version 2 or Version 3. R also states that a few files are distributed under the LESSER GNU GPL, version 2.1 or later.\n\n\nggplot2\nggplot2 operates under an MIT + file license.\n\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\n\n\nMy Responses:\n• I looked at the emo package and compared it with ggplot2. emo is hosted on github while ggplot2 has CRAN listed as the repository. The ggplot2 package has a different license than the emo package, listed under the MIT + file license or GPL-3 licenses, respectively.\n• Without explicitly adding to the dependencies part of the package, each new package includes the dependency of R (>= 2.10). This is true of the package made during Lab 3. There is an MIT + file license for the new package that we created. Since each of the packages are considered “add-on” or “extensions” of R, and R is licensed under a GPL-2 or GPL-3 license, each of the “add-on” or packages developed have to be licensed under a GPL-compatible license. This blog post could or should be licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 3.0 United States License because it requires attribution while restricting commercial use or derivative work.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\n\n\nMy Responses:\n•This is a tricky questions. Our package in Lab 3 includes data that we did not create. This data is publicly available, but since it is accessing the data, it would be best to have the user of the package acknowledge the license or the initial location of the public data, similar to the example that was used with the textdata and tinytex examples in the book. If the user were to use the get_pd_presslog function from our package, the user could be prompted with a message on the license about the data.\n•I think the legality of the MIT license having a dependency on the GPL-3 license is kind of a gray area. It might depend on the type of data or information under the GPL-3 license. Conversely, my knowledge of the legality of these licenses could be completely the opposite where it is illegal to do this but because of the populations poor understanding of this and the lack of control or enforcement by the GPL-3 license holders, this type of violation continues to pass through the system.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/loganjohnson0/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/loganjohnson0/index.html#submission",
    "title": "Legal Stuff",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Atefeha1995/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/Atefeha1995/index.html#prompt",
    "title": "All that legal stuff…",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nFree software known as R was made available under the terms of the GNU General Public License, either version 2 (June 1991) or version 3 (as of the time of writing) (June 2007). I was able to obtain it by using R’s “licence()” function. The MIT + file License governs the distribution of the ggplot2 package.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nFirst, as described in Chapter 5.2, I utilized the code and regenerated the results for the golem package. Then, I repeated the process for the package we created for Lab 3 called AmesPD. The outcome for package dependencies is as follows:\n There were 29 observations for dependencies, and the picture above shows the first six observations. Then, I counted the licenses for these dependencies:\n\nThis code was for exploring the dependencies of a R package on CRAN. If we want to do the same for a package in GitHub, we need to just install the package and call the library. Then we can find it’s dependencies using the same method.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nWe are currently using license CC0 1.0 Universal which is in LICENSE file. It seems that there are different licenses which gives the user enough information about the repository and it’s files. The license make the user understood that what parts or files he/she can use, and also protect the author rights. We can change the license type, but I won’t do this. For example CC is the keyword of Creative Commons license family.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nAccording to the Colin Fay book, a package that is GPL-3 licensed is compatible with and recognized by the CRAN policy. As a result, it is conceivable to publish it in CRAN, although doing so requires the consent of every author. The contributors’ discussion and announcement of permissions may take place on Github.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Atefeha1995/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/Atefeha1995/index.html#submission",
    "title": "All that legal stuff…",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/anphan0828/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/anphan0828/index.html#prompt",
    "title": "It’s not the end…",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nlibrary(rmarkdown)\n\n\nUnder what license does R operate? What is the license for ggplot2?\nR operates under many licenses, including GPL-2 | GPL-3 (General Public License, version 2 and 3), all of which are listed here or in Licensing R.\nggplot2 is MIT-licensed as stated on CRAN documentation\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R.\n\nCombine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.)\n\n## Get all information on CRAN packages\n# install.packages(\"pkgnet\")\nlibrary(pkgnet)\npkgdb <- tools::CRAN_package_db()\n\n## Filter dependencies: input a list of package names, output a dataframe of these packages' information on CRAN\nextract_from_cran_db <- function(pkg_names, pkgdb){\n  pkgdb %>%\n    as_tibble(.name_repair = \"universal\") %>%\n    filter(Package %in% pkg_names)\n}\n\n\n\nWhat dependencies does the package have that you created for Lab-3?\nBecause our package is not on CRAN, we need desc to extract the dependencies.\n\n## Do the following in our team's package repo, load `plogdeps` and `plCRAN` dataframe here\nload(\"Lab-3-UNL-dependencies.RData\")\n# plogdeps <- desc::desc_get_deps(file=\"PressLogTeamUNL/\")\nplogdeps\n\n     type   package  version\n1 Depends         R  >= 2.10\n2 Imports lubridate        *\n3 Imports     purrr        *\n4 Imports tabulizer >= 0.2.3\n5 Imports     dplyr        *\n6 Imports     readr        *\n\n# plCRAN <- extract_from_cran_db(plogdeps$package, pkgdb)%>%\n#  select(Package,Version,Depends,License,License_is_FOSS,License_restricts_use)\nplCRAN\n\n    Package Version             Depends            License License_is_FOSS\n1     dplyr   1.1.0        R (>= 3.4.0) MIT + file LICENSE            <NA>\n2 lubridate   1.9.2 methods, R (>= 3.2)         GPL (>= 2)            <NA>\n3     purrr   1.0.1        R (>= 3.4.0) MIT + file LICENSE            <NA>\n4     readr   2.1.4          R (>= 3.5) MIT + file LICENSE            <NA>\n  License_restricts_use\n1                  <NA>\n2                  <NA>\n3                  <NA>\n4                  <NA>\n\n\n\n\nWhich licenses are involved? Are all of these dependencies required? Elaborate.\n6 dependencies are reported using desc package:\n\nBase R is required\nImports (as shown in plCRAN): lubridate (GPL >= 2), purrr, dplyr, readr (MIT licensed for these 3 pacakges)\ntabulizer also needs to be imported (as shown in plogdeps), but this package is not on CRAN so it is not found in CRAN pkgdb. tabulizer is also under MIT license as shown in this documentation\n\n\n\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nAccording to the book, blog posts are also copyrighted and the content should be licensed in a way that allows others to reuse (or not reuse) your work. For example, answeres on StackOverflow (what we did in Blog 1) is released in CC-BY-SA 3.0. So I’m guessing this blog post should be licensed similarly.\n\nusethis::use_ccby_license()\n\n✔ Setting active project to '/Users/hofmann/Documents/Teaching/Stat 585/Spring 2023/Stat585-at-ISU.github.io'\n✔ Leaving 'LICENSE.md' unchanged\n\n\n\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\n\nMy answer\nAs we can see in this part of the GPL FAQ, “Linking a GPL covered work statically or dynamically with other modules is making a combined work based on the GPL covered work”. That would mean that, as R is GPL, any work linking dynamically or statically to R would have to be GPL-based also\nI got this from the book, but I am not sure if it means that if my package dependency is licensed under GPL-3, my package has to be licensed under GPL-3 also. I really struggled understanding these legal stuff."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/anphan0828/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/anphan0828/index.html#submission",
    "title": "It’s not the end…",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/hardtme/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/hardtme/index.html#prompt",
    "title": "Legal Details of Licenses",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nAfter running license(), I learned that R primarily operates under GPL-2 and GPL-3 while some header files operate under LGPL-2.1. Calling library(help = \"ggplot2\") shows that the ggplot2 package uses the MIT license.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nThe current listed dependencies of my Lab 3 team’s TwoTeam4 package (and their licenses) are\n\nR (GPL-2 and GPL-3 while some header files operate under LGPL-2)\ndplyr (MIT)\nlubridate (GPL-2 | GPL-3)\nreadr (MIT)\npurrr (MIT)\nstringr (MIT)\ntabulizer (MIT)\n\nWe do need all of these dependencies in our package because the functions we created within our package call functions from the dependencies.\nIf we run the following code, we can see that our TwoTeam4 package has more dependencies than we listed. This more extensive list of dependencies includes dependencies of our dependencies. We can find the licenses for all of these packages using utils::packageDescription(\"<package_name>\", field = \"License\").\n\nlibrary(pkgnet)\nlibrary(TwoTeam4)\nteam_depends <- DependencyReporter$new()$set_package(\"TwoTeam4\")$nodes$node\n\nThe more extensive list of dependencies (and their licenses) includes\n\nR6 (MIT)\nbit (GPL-2 | GPL-3)\nbit64 (GPL-2 | GPL-3)\ncli (MIT)\nclipr (GPL-3)\ncrayon (MIT)\ndplyr (MIT)\nellipsis (MIT)\nfansi (GPL-2 | GPL-3)\ngenerics (MIT)\nglue (MIT)\ngrDevices (Part of R and thus probably GPL-2 and GPL-3)\ngraphics (Part of R and thus probably GPL-2 and GPL-3)\nhms (MIT)\nlifecycle (MIT)\nlubridate (GPL >=2)\nmagrittr (MIT)\nmethods (Part of R and thus probably GPL-2 and GPL-3)\npillar (MIT)\npkgconfig (MIT)\npng (GPL-2 | GPL-3)\npurrr (MIT)\nrJava (LGPL-2.1)\nreadr (MIT)\nrlang (MIT)\nstats (Part of R and thus probably GPL-2 and GPL-3)\nstringi (custom LICENSE)\nstringr (MIT)\ntabulizer (MIT)\ntabulizerjars (MIT)\ntibble (MIT)\ntidyselect (MIT)\ntimechange (GPL-3)\ntools (Part of R and thus probably GPL-2 and GPL-3)\ntzdb (MIT)\nutf8 (Apache License (== 2.0)\nutils (Part of R and thus probably GPL-2 and GPL-3)\nvctrs (MIT)\nvroom (MIT)\nwithr (MIT)\n\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nAfter reading the examples in chapter 4 of Licensing R, I chose to use a CC-BY-4.0 license for this blog post.\n\n\n\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nI think so.\n\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nI don’t think so.\n\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nI don’t think so.\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nI think so.\nWe can consider the readr package as an example of the above issues. The readr package imports the clipr package and thus has the clipr package as a dependency. The clipr package is released under GPL-3 while readr is released under the MIT license. I assume that the developers of a tidyverse package like readr made sure that there are no legal issues or copyright infringement issues that could arise when including a package with the GPL-3 license as a dependency to a package that uses the MIT license. Hence, if readr can be published on CRAN under the MIT license while having a dependency on a package under the GPL-3 license, it seems reasonable that other packages in similar situations should also be able to be published on CRAN without repercussions.\nIn chapter 3 of Licensing R, David Fay notes that all derivative works of GPL licensed works need to be released under a GPL-compatible license. Later in chapter 3, I learned that the MIT license is GPL-compatible. This makes it seem like there is nothing wrong with releasing a package under the MIT license when it has a dependency on a GPL licensed package. To be even more on the safe side, you should also make the source code of your MIT-licensed package available in a GPL-compliant way.\nI was interested in the topic of licensing R packages, so I did some further research and came across R Packages (2e) by Hadley Wickham and Jenny Bryan. In [section 13.6]{https://r-pkgs.org/license.html} of R Packages (2e), the authors note that in their opinion, the license of your R package and the licenses of R packages whose exported functions you use via Imports or Suggests don’t have to match. Based on my reading of chapter 4 in David Fay’s Licensing R, I would argue that there is at least one case where you have to be careful about license matching. Suppose that the license of one of your package’s dependencies does not allow for commercial use. If you intend that your R package can be used in a commercial setting, you should find another way to implement your code that does not use the dependency with a restrictive license.\nIn the case of my lab 3 team’s TwoTeam4 package, I think we would be able to publish it on CRAN under an MIT license even though some of its dependencies are GPL licensed.The package needs some cleaning up first, though. I would also like to check into the rJava package’s LGPL-2.1 license, the stringi package’s custom license, and the utf8 package’s Apache license just to be safe."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/hardtme/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/hardtme/index.html#submission",
    "title": "Legal Details of Licenses",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/santos-cl/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/santos-cl/index.html#prompt",
    "title": "Dependencies",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR operates under the the GNU General Public License(V2, from 1991; V3 from 2007). Additionally, a small number of files are distributed under the Lesser GNU General Public License ( > V2.1).\nShow in New Window\n\nThis software is distributed under the terms of the GNU General\nPublic License, either Version 2, June 1991 or Version 3, June 2007.\nThe terms of version 2 of the license are in a file called COPYING\nwhich you should have received with\nthis software and which can be displayed by RShowDoc(\"COPYING\").\nVersion 3 of the license can be displayed by RShowDoc(\"GPL-3\").\n\nCopies of both versions 2 and 3 of the license can be found\nat https://www.R-project.org/Licenses/.\n\nA small number of files (the API header files listed in\nR_DOC_DIR/COPYRIGHTS) are distributed under the\nLESSER GNU GENERAL PUBLIC LICENSE, version 2.1 or later.\nThis can be displayed by RShowDoc(\"LGPL-2.1\"),\nor obtained at the URI given.\nVersion 3 of the license can be displayed by RShowDoc(\"LGPL-3\").\n\n'Share and Enjoy.'\nOn the other hand, ggplot2 operates under a different license: MIT + file\n[1] \"MIT + file LICENSE\"\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nThe DESCRIPTION file for the package we, from Team 2, made does not list any dependencies but the package definitely has dependencies. We have failed to include the package dependencies. However, the package needs depends on the packages tabulizer, tidyverse, and lubridate.\nPackage: Team2\nTitle: Get police presslogs\nVersion: 0.0.0.9000\nAuthors@R: c( person(\"Caio\", \"dos Santos\", , \"clsantos@iastate.edu\", role = c(\"aut\", \"cre\")), person(\"Alexandrea\", \"Arabio\", ,\n              \"aarabio@iastate.edu\", role = \"aut\"), person(\"Maxwell\", \"Skinner\", , \"mskinn25@iastate.edu\", role = \"aut\") )\nDescription: This package contains 3 functions to download, extract, and filter presslog data. Also, it contains a sample data\n              set.\nLicense: MIT + file LICENSE\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\nDepends: R (>= 2.10)\nRemotes: github::ropensci/tabulizer\nLazyData: true\nLitrVersionUsed: 0.7.0\nLitrId: 3071b204a7d4052aa4f9e994be3b30a9\nNeedsCompilation: no\nPackaged: 2023-03-07 21:17:37 UTC; santo\nAuthor: Caio dos Santos [aut, cre], Alexandrea Arabio [aut], Maxwell Skinner [aut]\nMaintainer: Caio dos Santos <clsantos@iastate.edu>\nBuilt: R 4.2.1; ; 2023-03-07 21:17:38 UTC; windows\n\n-- File: C:/Users/santo/AppData/Local/R/win-library/4.2/Team2/Meta/package.rds \nWhen we try to retrieve the package dependencies, we get the following error:\nINFO [2023-03-08 19:09:36] Constructing dependency network for Team2\nFATAL [2023-03-08 19:09:36] Package 'Team2' does not have any dependencies in [Imports, Depends]. If you think this is an error consider adding more dependency types in your definition of DependencyReporter. For example: DependencyReporter$new(dep_types = c('Imports', 'Depends', 'Suggests'))\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nAn appropriate license for this This blog post seems to be ***CC-BY-NC-SA***.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nTo me, it seems like you would be all right to publish on CRAN an MIT-licensed package that depends upon a GPL-3 licensed package. The reason is that, when you list a package as a dependency of you the package you are not actually including that code behind that package in your code. For instance, say that package is taken down, and people cannot access that specific package anymore. The new package, distributed under the MIT license, will not have pieces of that package included. It might sounds too simplistic but an analogy would be to require every auto dealership to also have a license for wholesale fuel. Althought the cars they distribute run on fuel, they deliver the fuel with the car. That being said, I am just an agronomist so I do not really understand much about all the legal implications of these licenses."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/sudi007/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/sudi007/index.html#prompt",
    "title": "All that legal stuff",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\n\n#library(devtools)\n#library(tools)\n#library(pkgnet)\n#library(ggplot2)\n\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR operates under the GNU General Public License, either Version 2, June 1991, or Version 3, June 2007. The GNU General Public License is a free-for-all license for software and other creative work. Under this license, users can not only use the software but also modify and distribute it as long as all the changes are made as part of the same license. The R-package, ggplot2, also operates under the GNU General Public License version 2.\n\n\nWhat are the dependencies of the package you made?\nThe dependencies of the the package that was made for lab 3 are tabulizer, tidyr, dplyr, tibble, lubridate, RCurl\nThe following is the package description This is the description file for the lab 3 our group created Package: Team3 Title: Reading Ames Police Presslogs Version: 0.0.0.9000 Authors@R: person(“Sabrena”, “Rutledge”, , “sabrenar@iastate.edu”, role = c(“aut”, “cre”)) Description: Convert Ames Police Presslogs from pdf to dataframes. It could also have some functions, but for now all it has is some data. License: MIT + file LICENSE Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.2.3 Depends: R (>= 2.10) Import: tabulizer, tidyr, dplyr, tibble, lubridate, RCurl Remotes: github::ropensci/tabulizer LazyData: true LitrVersionUsed: 0.8.0 LitrId: b446015960e43bc7c5ae99da41fc132b\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) #installing a github package\n\n# Install devtools package if not installed\n#install.packages(\"devtools\")\n#devtools::install_github(\"tidyverse/ggplot2\",force = TRUE)\n#remotes::install_github(\"tidyverse/ggplot2\",force = TRUE)\n\n\n# Get dependencies of ggplot2\npackage_dependencies(\"ggplot2\", which = \"all\")\n#devtools::session_info(\"ggplot2\")\n\nggplot2\n[1] “cli” “glue” “grDevices” “grid” “gtable” “isoband”\n[7] “lifecycle” “MASS” “mgcv” “rlang” “scales” “stats”\n[13] “tibble” “vctrs” “withr” “covr” “dplyr” “ggplot2movies”\n[19] “hexbin” “Hmisc” “knitr” “lattice” “mapproj” “maps”\n[25] “maptools” “multcomp” “munsell” “nlme” “profvis” “quantreg”\n[31] “ragg” “RColorBrewer” “rgeos” “rmarkdown” “rpart” “sf”\n[37] “svglite” “testthat” “vdiffr” “xml2” “sp”\n\ndesc <- packageDescription(\"ggplot2\")\ndesc\n\nPackage: ggplot2\nVersion: 3.4.1\nTitle: Create Elegant Data Visualisations Using the Grammar of Graphics\nAuthors@R: c( person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role =\n        \"aut\", comment = c(ORCID = \"0000-0003-4757-117X\")),\n        person(\"Winston\", \"Chang\", role = \"aut\", comment = c(ORCID =\n        \"0000-0002-1576-2126\")), person(\"Lionel\", \"Henry\", role =\n        \"aut\"), person(\"Thomas Lin\", \"Pedersen\", ,\n        \"thomas.pedersen@posit.co\", role = c(\"aut\", \"cre\"), comment =\n        c(ORCID = \"0000-0002-5147-4711\")), person(\"Kohske\",\n        \"Takahashi\", role = \"aut\"), person(\"Claus\", \"Wilke\", role =\n        \"aut\", comment = c(ORCID = \"0000-0002-7470-9261\")),\n        person(\"Kara\", \"Woo\", role = \"aut\", comment = c(ORCID =\n        \"0000-0002-5125-4188\")), person(\"Hiroaki\", \"Yutani\", role =\n        \"aut\", comment = c(ORCID = \"0000-0002-3385-7233\")),\n        person(\"Dewey\", \"Dunnington\", role = \"aut\", comment = c(ORCID =\n        \"0000-0002-9415-4582\")), person(\"RStudio\", role = c(\"cph\",\n        \"fnd\")) )\nDescription: A system for 'declaratively' creating graphics, based on\n        \"The Grammar of Graphics\". You provide the data, tell 'ggplot2'\n        how to map variables to aesthetics, what graphical primitives\n        to use, and it takes care of the details.\nLicense: MIT + file LICENSE\nURL: https://ggplot2.tidyverse.org,\n        https://github.com/tidyverse/ggplot2\nBugReports: https://github.com/tidyverse/ggplot2/issues\nDepends: R (>= 3.3)\nImports: cli, glue, grDevices, grid, gtable (>= 0.1.1), isoband,\n        lifecycle (> 1.0.1), MASS, mgcv, rlang (>= 1.0.0), scales (>=\n        1.2.0), stats, tibble, vctrs (>= 0.5.0), withr (>= 2.5.0)\nSuggests: covr, dplyr, ggplot2movies, hexbin, Hmisc, knitr, lattice,\n        mapproj, maps, maptools, multcomp, munsell, nlme, profvis,\n        quantreg, ragg, RColorBrewer, rgeos, rmarkdown, rpart, sf (>=\n        0.7-3), svglite (>= 1.2.0.9001), testthat (>= 3.1.2), vdiffr\n        (>= 1.0.0), xml2\nEnhances: sp\nVignetteBuilder: knitr\nConfig/Needs/website: ggtext, tidyr, forcats, tidyverse/tidytemplate\nConfig/testthat/edition: 3\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.2.1\nCollate: 'ggproto.r' 'ggplot-global.R' 'aaa-.r'\n        'aes-colour-fill-alpha.r' .....\nNeedsCompilation: no\nPackaged: 2023-02-06 09:42:01 UTC; thomas\nAuthor: Hadley Wickham [aut] (<https://orcid.org/0000-0003-4757-117X>),\n        Winston Chang [aut] (<https://orcid.org/0000-0002-1576-2126>),\n        Lionel Henry [aut], Thomas Lin Pedersen [aut, cre]\n        (<https://orcid.org/0000-0002-5147-4711>), Kohske Takahashi\n        [aut], Claus Wilke [aut]\n        (<https://orcid.org/0000-0002-7470-9261>), Kara Woo [aut]\n        (<https://orcid.org/0000-0002-5125-4188>), Hiroaki Yutani [aut]\n        (<https://orcid.org/0000-0002-3385-7233>), Dewey Dunnington\n        [aut] (<https://orcid.org/0000-0002-9415-4582>), RStudio [cph,\n        fnd]\nMaintainer: Thomas Lin Pedersen <thomas.pedersen@posit.co>\nRepository: CRAN\nDate/Publication: 2023-02-10 13:20:06 UTC\nBuilt: R 4.2.0; ; 2023-02-11 13:46:44 UTC; unix\n\n-- File: /Library/Frameworks/R.framework/Versions/4.2/Resources/library/ggplot2/Meta/package.rds \n\n\n#What dependencies does the package have that you created for Lab-3?\nThe dependencies the package that was created in lab 3 is tabulizer, tidyr, dplyr, tibble, lubridate, and RCurl package\n#Which licenses are involved?\n#for the package\nfor the package created in lab 3 MIT + file license\n#for the dependencies\nInformation for tabulizer package:“MIT + file LICENSE”\nInformation for tidyr package:“MIT + file LICENSE”\nInformation for dplyr package:“MIT + file LICENSE”\nInformation for tibble package:“MIT + file LICENSE”\nInformation for lubridate package:“GPL (>= 2)”\nInformation for RCurl package:“BSD_3_clause + file LICENSE”\n#Are all of these dependencies required? Elaborate.\nyes all of these dependencies are required as they are the part of the analysis and the functions that are created within the package requires these dependencies\n#Under which license should this blog post be published?\nThis blog should be published under the CC0 (Creative Commons Zero) license. CC0 ensures open access to all the creative work such as written pieces, painting, and music, among others. Open access means that the creator has waived all copyright on their work, allowing users to modify, re-create and distribute it without any restriction. However, as CC0 is termed as a public domain dedication, it is outside the purview of the regular open-source licenses such as GPL and MIT.\nMake sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\n#summary of all the above questions\nHere’s a common answer to all the “harping” questions. According to the book, it is legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3. However, there are certain considerations that one needs to be aware of. First of all, the MIT license is permissible license, which means that it has no restrictions on the use, modification, and distribution of the software. On the other hand, the GPT-3 license is a copyleft license which requires that any software distributed is also licensed under GPT-3.Considering these requirements, even if a code under a permissible license such as MIT combined with one that uses a GPT-3 license, it must meet the requisites of the stricter GPT-3 license."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/sudi007/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/sudi007/index.html#submission",
    "title": "All that legal stuff",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/motinaaa/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/motinaaa/index.html#prompt",
    "title": "Stat 585",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/motinaaa/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/motinaaa/index.html#submission",
    "title": "Stat 585",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Sabrenar/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/Sabrenar/index.html#prompt",
    "title": "Licenses and Packages",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR operates under versions 2 and 3 of a GNU General Public License with “absolutely no warranty.” The specifics of the two licenses can be found from RShowDoc(“COPYING”) and RShowDoc(“GPL-3”) respectively. Meanwhile ggplot2 has a MIT license that allows permission to anyone who obtains a copy of the ggplot2 software.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? The dependencies of the lab3 package are tabulizer, dplyr, tidyr, tibble, lubridate, RCurl, cli, fansi, generics, glue, lifecycle, magrittr, methods, pillar, pkgconfig, purr, R6, rlang, stingr, tidyselect, timechange, utils, vctrs, grDevices, utf8, withr, graphics, png, rJava, tabulizerjars, tools, and stats.\nWhich licenses are involved? These dependencies mostly have an MIT + file license, but two have GPL-3 license. Additionally only utf8 has an Apache License (== 2.0) | file license.\nAre all of these dependencies required? Elaborate. Not all of these dependencies are required. The following are not required: methods, utils, graphics, grDevices, tools, and stats. In order to determine whether a package was required, I found the list of packages in my library and found those that are not present. Those dependencies that are not present must not be required to run the created package.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package) Since there are no dependencies, data, or code contained within this blog, this blog should be published with an MIT license.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nAnswering the above question in regards to lab 3: While Colin Fay’s book gave an excellent way to check the various licenses of all dependencies, he did not provide an opinion about potential copyright infringement when releasing packages with an MIT license. It seems as though as long as there was no restricted-use licenses, releasing a package with a MIT license is fine. In terms of the specifics of releasing a package with an MIT license when a dependency has a GPL-3 license, I am of the opinion that since GPL-3 specifies that “you have the freedom to change the software or use pieces of it in new free programs” and that “if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code.” As such, if a new program is using a dependency as it is intended and is not claiming the work as its own (by listing the dependencies), then this falls under the rights of the user by the GPL3 license. Thus, in these circumstances it is acceptable to release a MIT license package despite having a GPL3 license dependency. As to the specifics of lab 3, the only required packages are tidyverse (including its sub-packages lubridate and tibble) and tabulizer. Both tidyverse and tabulizer have MIT licenses, so the above question is not applicable."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Sabrenar/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/Sabrenar/index.html#submission",
    "title": "Licenses and Packages",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/luobo119/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/luobo119/index.html#prompt",
    "title": "License",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR: GPL-2 | GPL-3. The GNU General Public License, either Version 2, June 1991 or Version 3, June 2007.\nggplot2: MIT + file LICENSE\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.)\n\nWhat dependencies does the package have that you created for Lab-3?\nR6, cli, dplyr, fansi, generics, glue, grDevices, graphics, lifecycle, magrittr, methods, pillar, pkgconfig, rlang, stats, tibble, tidyselect, utf8, utils, vctrs, withr, lubridate, timechange, purrr, bit, bit64, clipr, crayon, ellipsis, hms, readr, tzdb, vroom, png, rJava, tabulizer, tabulizerjars, tools\n\n\nWhich licenses are involved?\nApache License (== 2.0), file LICENSE, GPL-2, GPL-3, MIT + file LICENSE, GPL (>= 2), LGPL-2.1\n\n\nAre all of these dependencies required? Elaborate.\nNo. For example in ‘tabulizer’ package, ‘png’ is one dependency, but we only use ‘extract_tables’ function from ‘tabulizer’ package, which can also work without ‘png’ package. So not all dependencies are required. But when you install ‘tabulizer’ package, ‘png’ will be asked to be installed.\n\n\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nGPL-3 since ‘Rmarkdown’ is needed in this blog.\n\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\n\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nNo. There might be legal issue.\n\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nNo. By complying all the licensing requirements and getting the permission from all the contributors, there may not be a legal issue.\n\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\n\nYes. MIT is a permissive license and GPL-3 is strongly protective license. There might be copyright infringement.\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?\n\nYes, I think you can change the license if all contributors agree and there is no infringing copyright.\nMy opinion about this is that even though it is doable, it requires a lot of extra work and it may take time and effort to get permission from every and adjust everything to comply with the license requirement. So it might be better to decide from the beginning about which license to use."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/luobo119/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/luobo119/index.html#submission",
    "title": "License",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/AArabio/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/AArabio/index.html#prompt",
    "title": "License Fun",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nR as a package is licensed under GPL-2 | GPL-3 . File doc/COPYING is the same as GPL-2 . Some files are licensed under ‘GPL (version 2 or later)’, which includes GPL-3 … ggplot2 operates under MIT + file LICENSE …\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nusethis::\nCreative commons licenses appropriate for data packages: CC0: dedicated to public domain.\nMost of the dependencies are required but updates may change this depending on packaging … we would likey publush this blog under the GPL-3 license… I would not want anyone to take my name and be able to say that I wrote something or had a certain opinion that was untrue or invalid.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nI do think that it would be okay to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 as long as the dependency was properly stated and regarded. I think that as long as one is covering themselves and following the requirements as stated for their package then there shouldn’t be a problem …\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/AArabio/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/AArabio/index.html#submission",
    "title": "License Fun",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing.\nThis is essentially asking for an assessment of licenses - this is, again a pure writing assignment, no coding involved besides fixing the Yaml front matter. There is no right or wrong answer regarding the question of whether you -without looking at the specifics of the code- can or can not publish a package as MIT that depends on a GPL-3 package. What counts is the strength of your argument in favor of your decision. :)"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Starwiiin/index.html#prompt",
    "href": "blog-2023/Blog-7-submissions/Starwiiin/index.html#prompt",
    "title": "All that legal stuff…",
    "section": "Prompt:",
    "text": "Prompt:\nThe DESCRIPTION file of a package contains the package’s meta information. Most of the fields in this file are quite straight forward: author, version number, and a short package description. When you call library(help=\"<package name>\") for package <package name> you can see the contents of the DESCRIPTION file for that package (and some parts of the NAMESPACE file).\nRead through Colin Fay’s (short) book on Licensing R\nWrite a blog post addressing the following questions:\n\nUnder what license does R operate? What is the license for ggplot2?\nParvin’s answer: R software is a free software which was released under the terms of the GNU General Public License, either version 2 (June 1991) or version 3 (June 2007). I used the “licence()” in the R and could get it. ggplot2 package is distributed based on the MIT + file License.\n\n\nWhat are the dependencies of the package you made?\nRead through chapter 5.2 of Licensing R. Combine and adjust the code pieces to create the dependencies for a package that is on github rather than CRAN. (Don’t forget about the package desc.) What dependencies does the package have that you created for Lab-3? Which licenses are involved? Are all of these dependencies required? Elaborate.\nParvin’s answer: Unfortunately, I could not get the dependencies for out team’s package (Team 6) beacuse of one issue in importing the package. So, I tried to get the dependencoes and run the code on the package of another team which is named “AmesPD” from “Team1”. For the first part using the get_deps function, I got:\nINFO [2023-03-09 16:10:54] Constructing dependency network for Team1\nINFO [2023-03-09 16:10:54] ...done constructing dependency network.\nFor the next part, I got:\nNew names:\n• `Authors@R` -> `Authors.R`\n• `Classification/ACM` -> `Classification.ACM`\n• `Classification/ACM-2012` -> `Classification.ACM.2012`\n• `Classification/JEL` -> `Classification.JEL`\n• `Classification/MSC` -> `Classification.MSC`\n• `Classification/MSC-2010` -> `Classification.MSC.2010`\n• `Date/Publication` -> `Date.Publication`\n• `X-CRAN-Comment` -> `X.CRAN.Comment`\n• `Reverse depends` -> `Reverse.depends`\n• `Reverse imports` -> `Reverse.imports`\n• `Reverse linking to` -> `Reverse.linking.to`\n• `Reverse suggests` -> `Reverse.suggests`\n• `Reverse enhances` -> `Reverse.enhances`\nFor the next part, I got:\n A tibble: 8 × 2\n  License                                    n\n  <chr>                                  <int>\n1 Apache License (== 2.0) | file LICENSE     1\n2 Apache License 2.0                         1\n3 GPL (>= 2)                                 2\n4 GPL-2 | GPL-3                              2\n5 GPL-3                                      1\n6 LGPL-2.1                                   1\n7 MIT + file LICENSE                        19\n8 file LICENSE                               1\nIn this way, we can get the dependencies of the package that we made in the lab or any package which is available in Github.\nUnder which license should this blog post be published? Make sure that you are using an appropriate license. (You can change the current licenses with the help of commands from the use_license_XXX family in the usethis package)\nFor this blog, we are using the license cc0-1.0; I am gonna keep this license.\n\n\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nWhen confronted with the above question, ChatGPT gave two – quite different – responses, as shown below. The main point in both responses is ‘your package may be considered derivative work’. At the specific problem of the package developed for Lab 3, what is your opinion about potential copyright infringements when releasing the package with an MIT license? Make sure to take the relevant passage in Colin Fay’s book under consideration.\nParvin’s answer: My understanding from the Colin Fay’s book was that a package which is licensed under GPL-3 is compatible and accepted by the CRAN policy. Therefore, it is possible to publish it in CRAN but it needs the permission of the all the contributors. The conversation and permission announcement may happen in the Github between the contributors. I just mentioned the points that was said in the book and it was not said in the following information from ChatGPT.\nThe legal implications of publishing an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3 are complex and can vary depending on the specific circumstances. It is always advisable to seek legal advice from a licensed attorney if you have any doubts or concerns about licensing issues.\n\nHowever, in general, it is possible to publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3. This is because the MIT license is a permissive open-source license that allows for more flexibility in how the software can be used and distributed, and it is generally considered compatible with the GPL-3 license.\n\nThat being said, if your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore subject to the terms of the GPL-3 license. This means that if you distribute your package, you may need to also distribute the source code for your package under the GPL-3 license or a compatible license, and you may need to ensure that the requirements of the GPL-3 license are met for the entire distribution, including any dependencies.\n\nIt is also worth noting that the R community has its own guidelines and recommendations for package licensing, and it is important to comply with these guidelines if you want to publish your package on CRAN. The CRAN Repository Policy states that packages should have a \"permissive\" or \"GPL-compatible\" license, but does not explicitly require that packages use the GPL license or any other specific license.\n\nIn summary, while it is possible to publish an R package on CRAN under an MIT license while having a dependency on a package that is licensed under GPL-3, it is important to understand the implications of the different licenses and to ensure that you comply with any applicable guidelines and recommendations from the R community.\nAfter harping a bit on copyright infringement in general, ChatGPT changed its response to\nTechnically, you can publish an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3, but doing so would not be compliant with the terms of the GPL-3 license.\n\nThe GPL-3 license is a strong copyleft license that requires derivative works to be released under the same license. If your package depends on a GPL-3-licensed package, your package may be considered a derivative work and therefore must be licensed under the GPL-3 license or a compatible license.\n\nThe MIT license, on the other hand, is a permissive license that allows for more flexibility in how the software is used and distributed. However, it is not compatible with the GPL-3 license, and therefore cannot be used for derivative works of GPL-3-licensed software.\n\nPublishing an R package on CRAN under an MIT license when you have a dependency on a package that is licensed under GPL-3 would be a licensing violation, and could potentially result in legal action or other consequences. It is important to comply with the licensing requirements of all dependencies in your package to avoid any legal issues.\nThe ‘harping’ questions:\n\nIs it legal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it illegal to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nIs it a copyright infringement to publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3?\nCan I publish an R package on CRAN under an MIT license when I have a dependency on a package that is licensed under GPL-3 without infringing copyright?"
  },
  {
    "objectID": "blog-2023/Blog-7-submissions/Starwiiin/index.html#submission",
    "href": "blog-2023/Blog-7-submissions/Starwiiin/index.html#submission",
    "title": "All that legal stuff…",
    "section": "Submission",
    "text": "Submission\nWrite answers to the questions directly into the file README.Rmd. Push the blog post to your blog-7 repo. Make sure that all of the checks are passing."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/xyzyc/ZhouYingchao.html",
    "href": "blog-2023/Blog-2-submissions/xyzyc/ZhouYingchao.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read the chapter “9. Personal access token for HTTPS”.\nThis chapter mainly teaches us how to set up a personal access token (PAT) to allow the local computer talk to the GitHub. Note the password for login on GitHub is not an acceptable credential.\nThe whole generating and storing process may be done through R package usethis. Commands usethis::create_github_token() will generate the PAT and gitcreds::gitcreds_set() can store the credential.\nYou may also generate the PAT on https://github.com/settings/tokens and store the token generated at a secure place.\nBu default, the APT will expire in 30 days. And you need to re-generate and re-store the APT in the same steps.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nIt was a mess…\nI once worked with a classmate. We had a Github repository but I didn’t know how to push the changes from Rstudio or terminal, so every time I actually only committed the changes without pushing them to Github. I also occasionally uploaded my R script to Github page.\nHowever, once after I made a major change, I didn’t upload my file in a timely manner and my classmate worked with the wrong code for a day. When they taught me how to push to Github after this, the main branch was several steps ahead due to me uploading .R file. We had to force the push and lost some commits.\nUnfortunately, it turned out that we needed some old code that we lost in that force push… And we had to take some trouble to recover the commits.\nIf I had learned how to push from Rstudio (or just terminal) and only updated the code through push, we would have a clean record of the code.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nYou may use git remote set-url to change between https://github.com/usr/project.git and git@github.com:usr/project.git and switch between HTTPS and SSH credentials. (I currently use SSH. It’s good to know I can switch freely.)"
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/kundan7kumar/KumarKundan.html",
    "href": "blog-2023/Blog-2-submissions/kundan7kumar/KumarKundan.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nSolution: I have gone through Chapter 18 in depth, it provides a comprehensive introduction as well as hand-on experience to R Markdown which is a wonderful tool for creating documents and reports, it also allows to embed R code within a document and produces a various format output like HTML, pdf, word using knitr options. It also helps in creating the first R Markdown document with ‘Hello World’ and also covers the basics of formatting and styling text, including how to add headings, images,bullet points, and tables. Apart from formatting and styling it also explains how to customize CSS and themes to the document. It will help with creating professional reports as well as documents of the work. Moreover, it also explains the how to connect and push R markdown file to GitHub and how to publish the report.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nSolution: Being a software developer in the past, I have used versioning tools like git and subversion. When I started using git within my team, I ended up with multiples mishap in the team projects. one of the scenarios I pulled the code and try editing it but forget to commit and push, and then I pulled the latest version again which ended up losing my own work. As there is no backup copy of my code and I was working on master copy, the pulled request overwrites my work.\nIt could be avoided if I used branching concept of git. Branching ensures my work is saved even if I pull the latest version of the code from the main branch. If I knew the standard procedure of git, I may not end up losing my work. I think branching is one of the best ways to cooperate and contribute to team projects.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nSolution: From chapter 12 of Jenny Bryan’s book, I learnt how to connect RStudio with Git and GitHub. In my case, Somehow, RStudio are not able to detect git, install the git explained in chapter 6 of the book and finally able to connect RStudio to git and GitHub."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/anyeshar/RayAnyesha.html",
    "href": "blog-2023/Blog-2-submissions/anyeshar/RayAnyesha.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\nWrite a short (100-150 words) summary of the chapter you read in-depth. I read chapter 9 about the person access tokens for HTTPS. GitHub requires a personal access token so that they know the person who is trying to make changes is the correct user. The password we use to login is not sufficient to verify credentials which is why we need this specific personal access token. All you have to do is generate a token and then enter it when you set up credentials. You can set a time for expiration, and once the token expires you have to regenerate a new one. This chapter also details the difference between HTTPS and SSH. HTTPS is strongly recommended over SSH because it is easier to work with and can be used with GitHub’s API which is called in some R packages.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How? A big problem working on a group project is sharing code. Often we can split up the work so we don’t need to share code, but if we do we often email files back and forth which can be tedious and sometimes not the most up to date. Using GitHub would solve this problem and branching could ensure we can work parallelly.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book. I also read the chapter on branches. I have never used branches before. This seems important because you can work on stuff without messing with the main branch."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html",
    "href": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#chapter-27-the-repeated-amend---summary",
    "href": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#chapter-27-the-repeated-amend---summary",
    "title": "Happy Git with R",
    "section": "Chapter 27: The Repeated Amend - Summary",
    "text": "Chapter 27: The Repeated Amend - Summary\nDuring Lab 1, you may have encountered a similar situation to our group. Our repository was quickly filled with many small commits that ranged from changing a single argument to entire sections of the lab. The repeated amend workflow will be useful in the future as I strive to make my version history more digestible for collaborators.\nInstead of performing many small commits, the amend action allows you to edit a previous commit as you make unforeseen positive progress. This is possible in RStudio through the “amend previous commit” check box in the commit interface window. Once you have completed a section of code or accomplished a goal, then commit. The commit history will show you finished the section or accomplished the goal in a single commit rather than many smaller commits. Once you’ve tested the code and feel good about the commit, you can push it and repeat the process for the next task."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#team-mishap",
    "href": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#team-mishap",
    "title": "Happy Git with R",
    "section": "Team Mishap",
    "text": "Team Mishap\nIn an introductory data mining class, my group took an especially long time to develop, train, and test our model because no one knew which file was most updated or advanced. We desperately needed a lesson on reproducible code as well. R scripts were named after the author and usually had a number or adjective to further describe the iteration (ex. Landon_6 or Zach_CleanData). Git would have eliminated this confusion through a main branch that is pulled from and pushed to as progress is made individually.\nIn many of the scripts, file paths were hard coded. Instead of saving a cleaned or manipulated data frame as a new file in a common repo, we each spent hours running code to produce it as an object in our local R Studio. It was a disaster. The group has come a long way since the project and it is funny to look back on our ineptitude."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#new-git-feature",
    "href": "blog-2023/Blog-2-submissions/Landon-Getting/GettingLandon.html#new-git-feature",
    "title": "Happy Git with R",
    "section": "New Git Feature!",
    "text": "New Git Feature!\nIf you become stuck during a cycle of repeated amends (or at any time prior to a commit), utilize the “Diff” or “Commit” actions in RStudio to either discard all changes or discard a chunk of changes."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Hiiiua/HuaMuxin.html",
    "href": "blog-2023/Blog-2-submissions/Hiiiua/HuaMuxin.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\nThe chapter Branches talks about how to work individually on experimental ideas without harming the main project. Basically, one only needs to create and check out a branch, then it will be easy to switch back and forth between the branches to work on the edition as needed. Once the work has been done, one can always merge in main. However, there could be conflicts in merging, they come from divergence in the branches and the right way to resolve the conflict is pulling out the unmerged file and see the lines in conflict and edit them. It’s always an option to abort merging and back to the previous state.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\nI used to work with teammates on a project. During the data cleaning part, we can’t specifically divide the work so each of us wanted to some explorations so we fell in the dilemma that if we should committing our own exploration or not. It should be a good idea to check out branches before deciding if we want to add any new codes.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\nA new feature I learned from this book is taking advantage of refs to identify a specific point in the repo’s history."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/charlestbonk/BonkCharlie.html",
    "href": "blog-2023/Blog-2-submissions/charlestbonk/BonkCharlie.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\n\nThe chapter the I read was “29. Pull, But you have Local Work”, where Bryan talks through how to resolve a common way to have merge conflicts: when you want to push but can’t until you pull but you have changes locally, so you can’t pull with automatic merging. She covers both how to manage pulling with in-progress work both commited and not commited. She also talked about what to do when the easier steps don’t work out; git stash won’t always work, so here’s what to do if it doesn’t. She also touched on rebasing, and on continuing your own work in a temporary branch from main.\n\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\n\nWhile working on my Capstone project in undergrad, a group member of mine had his laptop destroyed by a dog knocking a beer over. We lost about 2 weeks of work that day. If we were using git, we (probably) would have lost significantly less work, and I wouldn’t have had to stay up multiple days to work on the code that he had lost. Git would have been good both to help store the code, that way things like that could have been easily avoided and worked around, but also, git pushes and pulls are much easier than emailing R scripts around.\n\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\n\nI am horrified of merge conflicts. I still am horrified of merge conflicts. But now, I am a little less scared, especially knowing that they are common and happen all of the time. Even if I forget the exacts on how to manage merge conflicts, I do also know now where I can go for a relatively clear step-by-step walkthrough of managing pulling when I have work of my own (becuase that is easier than saving all of my work in an external document and then deleting my directory locally and then make a new directory and connect it to the repo and then move my changes back, just so I can pull the most recent work.)"
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/TWiedRW/WiederichTyler.html",
    "href": "blog-2023/Blog-2-submissions/TWiedRW/WiederichTyler.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nFor this blog, I looked at Chapter 29: “Pull, but you have local work”. When work is saved locally and not saved to GitHub, pulling the repo is done normally without error. If one pulls and the file exists differently in the repo, then an error occurs. git stash will save local changes when pulling. This won’t change the fact that the files are still in conflict, but it provides temporary relief.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nThe biggest mishap is probably having merge conflicts with git. Sometimes when I can’t figure out how to pull/merge when conflicts exist, I simply delete what I have and pull from the repo to start again fresh (after saving my work somewhere locally).\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\ngit stash save and git stash pop. Although the author mentions staying away from these in favor of other methods, I think they are neat tricks!"
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/charchit/ShuklaCharchit.html",
    "href": "blog-2023/Blog-2-submissions/charchit/ShuklaCharchit.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read Chapter 1 and Chapter 30 in depth and glanced over the rest of them to understand the basic functionality of GIT. Chapter 1 talks about why GIT is important, and chapter 30 talks about working with your future self.\nOne of the most important feature of GIT is version control. It allows user to use “track changes” like function of microsoft word but much better. There are many hosting services like github, bitbucket, gitlab or self hosting. Learning how to use GIT initially has a steep learning curve however it pays off in the long run when a lot of the conflicts and new code is written and need to be rewritten in the future. Other advantages of GIT relates to “Exposure”: showing your work to the world, “keener”: learning from other people, “Collaboration”: feature such as Google Doc (multiple people working on the same file at the same time) and editing/saving etc like an email. There are a few types of repository, most common ones are public and private. The above discussed tools and tech of github allows to fix issues, bugs in softwares, and collbaorate effectively in any programming language including R.\nTime Travel: As we all know time travel is impossible in our current understanding of universe and physics. However, the closest thing to time travel we have is the past files and storage. Git allows you to go back in time and check your previous work to use it in the future work or even copy or build something off of it completely new. Two functions of Git such as History and Blame helps in seeing the past work and the person who committed those changes.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nBiggest mishap are usually about the contributions and communcation in a team. I do not think it would be completely avoided by the GIT but it could however be helpful to have a version control to communicate and collaborate effectively within the team. Also, having cloud storage helps a lot in working on different computers (considering me and my tomorrow’s self is a team). One of the research I am doing needs files to be updated constantly in python. I am using Box drive as a version control. If I had to create a new file everytime I make changes in the file I will have a thousand files in one month. My work is mostly only two people and we are fairly good in communicating with each other so it does not conflict too much. However, in the past when there were 3 or more people, it was a big problem to divide the work. Git can help in dividing the work very well and people not butting into each other’s work.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI heard about GIT many times in the past few years however I have never used it. This is the first time installing and using the GIT in a class, so everything in the Jenny Bryan’s book is new to me and there is a lot to learn. I lerned that it would be hard intially but it will get better with time, however one thing which might always bother even after being good at it is merging. I am not really sure how it will be hard but I am looking forward to learn to use this tool better in my projects and the labs and hopefully in my research."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/kellynay/NascimentoThompson_Kelly.html",
    "href": "blog-2023/Blog-2-submissions/kellynay/NascimentoThompson_Kelly.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nChapter 20 (“Repo, commit, diff, tag”) Git is a version control framework aiming to help developers who collaborate on big software projects. Repo or repositories are set of files that Git manages as they evolve. For new or existing projects, RStudio users are recommended to dedicate a local directory for it, create an RStudio project, and create a Git repository. By doing so, these applications will leave notes for themselves in hidden files or directories. When saving files, a commit is made, taking a snapshot of all files in the project instead of saving individual files. Diff is the set of differences between two file commits. One common practice in Git projects is writing a commit message each time a commit is made. These messages help colleagues understand recent changes made in the project. A tag is a name that represents the version of the project or references the last commit made.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nMy research involves modeling soil erosion at the STRIPS sites (https://www.nrem.iastate.edu/research/STRIPS/). I get rainfall, runoff, and sediment field data for ground truth validation purposes from another research group. These daily measurements from 2016 to 2022 are saved in Excel files created from R scripts. The data includes column names such as “treatment, site, date, rainfall, and runoff.” When I filtered the data, I noticed the rainfall data was included under the treatment column, and they are not supposed to be there. I contacted the collaborator who handled the data and asked the reasoning behind it; he explained it was for graphing purposes, saying that he would add an updated file to the Cybox folder removing the rainfall data from the treatment column. Git could avoid this issue because we would have access to the scripts that generate such files, and I would not have to go to Cybox to download a new version of the field data. Thus, it is important to work in a version control system in a case like this, where files are updated every year.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI followed the steps on Chapter 11 - “Connect to GitHub”. I created a new repository on github.com and cloned the repo to my local computer using the Git Bash shell. Following the book instructions I was able to change my working directory, list its files, and display the README file. I also installed GitHub Desktop and cloned repos from github.com. I tested by cloning Blog 1 to my computer."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/mattkava/KavanaughMatthew.html",
    "href": "blog-2023/Blog-2-submissions/mattkava/KavanaughMatthew.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "Write a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth. For this blog, I read Chapter 30, which is called “Time Travel: See The Past”. It discussed the various ways in which one is able to retrieve a prior version of a project if they desire to make a change or simply want to analyze the history of their work. The first section summarizes hyperlinks, which allow access to commits on a Github repository and access to past versions. Hyperlinks allow one to select specific lines of code in a certain state and share them with others, making for easy collaboration on any project. The “blame” feature enables those who have access to see the commit history, including who edited a file and when such edit occurred. Similarly, the “history” feature enables one to see commits on a single file rather than the entire repository. Finally, the “search” feature enables a user to locate code, commits, or comments on specific files in a repository.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?. In my R programming class during my senior year of college, my group and I were working on a project that entailed analysis of air pollution and its impacts on a number of health conditions, such as obesity, asthma, diabetes, and cancer. Each member of the group analyzed a different variable and produced a number of graphs using ggplot2 as well as linear correlation tests and graphs that were produced using the base R capabilities. Unfortunately, this occurred during the busy period at the end of the semester, and several of our 5 group members had many other projects and exams that were taking place. Additionally, one of the group members got badly sick, and was unable to attend group meetings or even complete much work virtually. Hence, group meetings came to a halt, and we had made little progress on the project with only two days remaining until the due date. Hence, we ended up pulling an all nighter the night before the due date in which we all sat down to knock in out. There were varying levels of experience with R programming, so several of us had to teach others how use ggplot2 and several other R packages. It was frustrating to have to do so much work last minute, and git definitely could have solved this problem. It would have been easy to share R markdown and code files via a shared repository so that others in the group could see what had been done and by who. Additionally, using git would have allowed our team to provide suggestions to each person’s contribution and allowed us to continue progressing on the project remotely, even when some members were not available.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.. One example of a git feature that I learned about from this chapter was the issue search feature. This is an advanced search feature that allows for a quick way to search for specific issues within a repository using the built-in features of is:issue and is:open. This allows someone to easily find and troubleshoot issues without needing to look through hundreds or thousands of lines of code."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/HarunCelikOtto/CelikHarun.html",
    "href": "blog-2023/Blog-2-submissions/HarunCelikOtto/CelikHarun.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nMy answers:\n\nWhile I learned new things from all the chapters I had an interest in checking, I especially found the “Resetting” chapter to be resourceful. Simply, there are three methods for resetting a commit. The git reset ---hard HEAD^ will undo everything, losing all changes. The git reset HEAD^ will only undo the commit and clear the stage but your files stay the same. Finally git reset --soft HEAD^ will undo the commit and restore the staged changes. If the intention is to change the earlier message, there is also a possibility to amend recent commit messages by using git commit --amend -m \"New commit message\". Resetting is an important component to commit’s because we all make committing mistakes in our projects and these offer an alternative to “burning it all down.”\nI think the biggest mishap has always been not taking enough time to properly design the workflow that we wanted to use as a team. We would have one directory in Box, another in Github and people would start using their own local files for work without committing and since some branched and others didn’t, Git would have a difficult time understanding our project. An effort I want to make moving forward is really detailing exactly how we want to move forward with workflow and incorporating everyone’s ideas on workflow flexibility as projects evolves.\nI did not know about the --amend command. I also only recently learned about the different reset options after I made mistakes to a repository that I burned down (but didn’t have to had I known about these commands ahead of time)."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/HaomingWang123/WangHaoming.html",
    "href": "blog-2023/Blog-2-submissions/HaomingWang123/WangHaoming.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read the Chapter One of “Happy git and github with R”. After reading this chapter, I had an overall idea of the purposes of using Git and GitHub to improve our R programming experience. I have learned that, with GitHub, not only can we collaborate with our colleagues on projects in a more convenient way, but we are also provided a real-time backup and a record of our work progress. This backup helps us easily pick up our previous work, and the record of our work progress makes the bugs easier to be detected in case we fail to get a desired result. Another interesting point about GitHub that I learned from this chapter is Pull Requests. I found it useful especially for developing those complex packages with many different functions.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nOnce I had a project that requires me to generate some training data and use it to train a neural network model. I created two R script files, one for my training data and another for my neural network training model. After I generated my data, I forgot to save it in my local file and I directly used it to train my model. Since the data was quite large, the neural network training took me about 40 minutes. As R finished training my model, it suddenly crashed and I failed to save all my data and model which was very annoying. However, with git, although I might fail to save my model locally if my R crashes, I still have my codes and I can immediately get my training data by running the codes. In this case, it would take me much less time to restore all my work and model.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nOne new git feature I learned about is the user’s ability to track the package development and do their own modifications as the proposed changes. This feature provides me a platform to get a closer look at those packages I frequently use. After knowing that I am also able to do some modifications to make them better, I am also motivated to thoroughly understand the functionality of those famous packages."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/valeriehan6/HanValerie.html",
    "href": "blog-2023/Blog-2-submissions/valeriehan6/HanValerie.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read https://happygitwithr.com/workflows-browsability.html#workflows-browsability, which talks about which files should be saved to a repository to make for a good browsing experience.\nGitHub displays Markdown files well (but not RMarkdown or HTML), so when writing in RMarkdown, you should make sure to save the intermediate Markdown file to the GitHub repo. This can be done in the YAML header with\n\noutput:  \n  html_document:  \n    keep_md: TRUE\n\nAlso note that any file named README.md will automatically appear on the GitHub page of the directory it’s in.\nData file-wise, deliminated files (.csv or .tsv) are rendered well by GitHub, though some cleaning may need to be done since GitHub is a bit picky with certain formatting like quotes. For results files, PNGs are the best, though GitHub has added some PDF functionality. For other document types, the open-source Pandoc program can convert many different formats into Markdown.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nIn general, the biggest team project mishaps have been when one person isn’t contributing. I’m not sure this could be directly solved with GitHub since we were all aware the person wasn’t contributing. However, if the instructor required that the project used a GitHub repo to save work/progress (and would check commits on the repo), perhaps the non-contributing member would have felt more pressure to contribute to the repo. In all but one of the code-heavy projects, we did use GitHub to save our work (though it wasn’t available to instructor) and for non-code stuff we used Google docs, so we didn’t face other direct problems that would’ve been solved by git.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI learned a new workflow https://happygitwithr.com/repeated-amend.html. I didn’t realize that it could be valuable to commit but not push when in “WIP” mode to create little “footholds” for yourself. I’ll try to use the command:\ngit commit --amend --no-edit\nin the future."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/IanParzyszek/ParzyszekIan.html",
    "href": "blog-2023/Blog-2-submissions/IanParzyszek/ParzyszekIan.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "Chapter 27: The Repeated Amend: Ian Parzyszek 1)\nIn this chapter we focused on situations where you are making continual changes and updates to a project, but you don’t want to continually have a lot of commits. This could look sloppy and not as useful. However, you also do not want to have very few commits and not have a lot to fall back on. They gave an example of a rock climber and you want to have enough ankers to protect you, but too many can slow you down. They introduced the idea of adding the idea of “WIP” amendments. This is used when you made some changes and you may be in the middle of something and it will signal to other people that more commits may be coming. It seemed to me that ideally you want to have “WIP” comments which denotes that these changes only exist in your local repo, yet on git. Then you can continue to finish what you are working on. And on your end you may see a history that looks like this: A – B –C – WIP–D But once you finish what you have done push it only once you have finished D…then your repository commit history will look like this: A—B—C—D (much nicer) The Chapter went on to talk about what if you did push this intermediate step of WIP what do you do? Should you go back and change it so it looks nicer, should you not? And it all depends on the collaborators you have and if you believe that may have pulled from Git.\n\nThe biggest mishap I have had in a group project (that maybe git could be useful) was probably when two people were working together in the same room on part of the project and someone else was working remotely. What had happened was we were both making changes to the same part of the project at the same time, but didn’t know about it then when we came back together we found out that now we have to find a way to bring everything together again. I think maybe git could have been used in a way that it could have found a way to merge to two versions together and we could find a way to pick and choose which sections we would keep. I know we said we would learn about this soon, so I’m not exactly sure how this works in git, but I imagine it could be helpful.\n\n3). I don’t think this is necessarily a feature of git itself but rather an understanding that git users have, and that is the “WIP” commit message. Which can be extremely usefully whenever you are working with a group. If you accidently push something it lets your group know that you are in the middle of something and it is not yet to finalized or have a functional project yet. And it is also useful so that you yourself won’t have bunch of cluttered commits in your history."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/loganjohnson0/JohnsonLogan.html",
    "href": "blog-2023/Blog-2-submissions/loganjohnson0/JohnsonLogan.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read Chapter 16 for a more in-depth understanding of how to start using GitHub with RStudio with existing projects. Assuming GitHub accounts are already created, Jenny recommends starting a new repository for the project. On your local machine, all your scripts and code should be in a single project. Because it is your own local files, your are cloning to your local machine. Using the “usethis” package from R, it is simple to set up a GitHub repository on your machine. The “usethis” package performs some additional set up in the background. There is a more manual method to set up the repository, however, it is just not as simple. You can then copy your R projects into the newly created GitHub repository on your computer. You can then begin to commit and push your files to GitHub and confirm that they transitioned over to GitHub correctly.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nWhen I first began using R and RStudio, a fellow graduate student was helping me learn how to code while also providing his own code to share on the project. In this instance, we both had code on our computer that had various changes made independently of each other. After a few months, we both had worked on and off with these data. Had we been using GitHub, it would have been a lot easier to share the tips and tricks that we both learned from each other to make the code better. We also would have been able to keep up with each other’s analyses a lot easier than sending code over email.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI am basically brand new to git and GitHub. I’ve learned more about the commit, push, and pull process. Understanding how these function helps me a lot. I realize that I can keep files on my computer without having to worry about pushing everything I do to GitHub. I also better understand the process of pulling, committing, and pushing to always have the most up to date version of a piece of code."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Atefeha1995/AnisiAtefeh.html",
    "href": "blog-2023/Blog-2-submissions/Atefeha1995/AnisiAtefeh.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI finished reading Happy Git and GitHub for the use R, chapter 4. Creating a GitHub account is covered in the fourth chapter. I already had a little basic knowledge of Git and GitHub, but I’m always looking to learn more. Everyone can register at GitHub for free from here. I discovered that a GitHub username should:\n\nInclude real name and be original, brief, and simple to read.\nnot be tied to time, the school’s name, etc.\nnot include uppercase and lowercase letters, use hyphens to separate words.\nbe a good username while you can modify your username anytime later.\n\nGitHub provides unlimited free private repositories with a maximum of three external collaborators. If you are an academic member, educational/research staff member, or student, you can also take advantage of GitHub Education. formally recognized charities and nonprofits can benefit from GitHub for Good. You must purchase plans with a number of advanced features if you require private repositories with more than three external collaborators.Current plans and pricing information is available here.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nMost of the time, in our team projects, we face challenges that can be avoided by using GitHub. For example, in a team project I am currently working on, we upload our updated presentations in a shared Box folder. We created different sub folders for different collaborators, and each member should upload her/ his files in a specific folder mentioning its date and time. Now all of these files can be uploaded to a private repository, and everyone in the team can see changes with their related date and time and the member who made those changes. In this way, every document can be accessible easier for all the team members, and later, the team can make this repository public if possible, and others can also use the information you found and not reinvent the wheel.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI could not read all the chapters from the book, but it is very interesting that I found that GitHub can be connected with Rstudio. We can easily use these two for our projects. Regarding chapter 15 in the book, it seems that we can make changes in R studio and then commit the changes to the local repository, and then we can push our local changes to GitHub."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/anphan0828/PhanAn.html",
    "href": "blog-2023/Blog-2-submissions/anphan0828/PhanAn.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI chose chapter 9: Personal access token for HTTPS to read because I was having trouble with it when I first approached Git and GitHub.\nThe chapter talks about how a user can connect to GitHub remotely from their local computer since a regular password is no longer accepted as a credential. There are two protocols, HTTPS and SSH, and HTTPs is actually recommended by GitHub. Either protocol works independently with any repository. The chapter lists instructions to generate and use personal access token (PAT) both on the website and from R. There are ways to store the PAT (which I personally was so frustrated with losing it all the time) via some R packages. Last but not least, the chapter discusses frequently occurred problems and solutions.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nVersion conflicts are annoying and almost inevitable for any projects with collaborations. Even with personal projects, I found myself (a lot of times) rewriting what I have already done a few weeks ago because I did not keep track of the versions. That is when Git comes to the rescue and it forces me to organize my projects better.\nFor collaborative projects, each of us figures that we should clone the repo, then create a branch for our own local copy to add changes. Without a branch, conflicts occur if the master copy of file.txt had been modified by user A (after user B cloned it) but user B later pushes another modified file.txt to remote. Git would then require user B to pull before pushing their version, but that would overwrite their copy they want to push, causing so many problems. We actually learn git branching on a website: learngitbranching.js.org to, once and for all, sort this problem out with Git. The website is highly interactive and explains how Git works in a convenient way for user.\nFor personal projects, I used to not keep track of the versions, i.e., just modify the script repeatedly, which is not a good practice. My PI suggested that I upload my project/software to GitHub and also to PyPI (so that it can be installed in Python) for transparency and version control. It was tough getting to know Git but worth it. I mainly use Git locally and just push the files I want to the remote repository. Now all of the previous versions are stored in Git and I can access them anytime. Furthermore, I now know that I can do all such stuff within RStudio (I have only used Git in the terminal)\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.\n\nStoring and viewing PAT using R is definitely helpful, which cannot be done on the GitHub website. I still do not know why GitHub does not allow it, maybe for security reason, but I am glad gitcreds lets me see my PAT anytime. I added an Rmarkdown file MyExample.Rmd where I tried to store and view my current PAT"
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/hardtme/HardtMarieBlog2.html",
    "href": "blog-2023/Blog-2-submissions/hardtme/HardtMarieBlog2.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read Chapter 12: Connect RStudio to Git/GitHub. To have RStudio and GitHub communicate with each other, you should start with a new repository on GitHub that is initialized with a README. Then you need to copy a link to the GitHub repository, either HTTPS or SSH (whichever you prefer). Once everything is set up in GitHub, you move to RStudio and create a new project with version control. Then you paste the URL for your GitHub repository into the “Repository URL” box in RStudio and finish the project creation process. Assuming everything went smoothly, you should be able to see the README.md file from GitHub in your RStudio project. To further make sure everything is set up correctly, you can change the README.md file in RStudio, commit the changes, and push them to GitHub. If the changes appear in GitHub online, you’re good to go!\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nI have experienced a common inconvenience in several group projects and group homework assignments in my graduate statistics classes. The assignments usually involved writing a report or showing our work and including R code. If there hadn’t been the requirement to include R code, we probably would have used a collaboration tool like Overleaf to write the report. Since we also had to include working R code, this meant the groups preferred to work with RMarkdown files. After deciding which group member would type each question, we would each work on our own individual RMarkdown file, send them to each other when we were finished with our work, and then copy and paste everyone’s work into one file for submission. Using git would have been a lot easier because all group members could have been able to see each other’s work sooner. Combining the work into one file also would have been much simpler with git.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.. I learned that you can connect RStudio to GitHub using HTTPS instead of SSH. When I last worked with RStudio and GitHub together (a few years ago), I thought you could only connect the two using SSH. The HTTPS method seems much easier."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/santos-cl/dosSantosCaio.html",
    "href": "blog-2023/Blog-2-submissions/santos-cl/dosSantosCaio.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "In the 30th Happy git with R, Jane Bryan describes how one can use GitHub to time travel. Although she does not mean actual time travel, she describes a particularly useful feature of Git: the ability too look at previous versions of one’s code. There a multiple instances in which this would be useful. For instance, one might want to refer back to the color scheme used in one of the previous drafts of a manuscript; or worse, one might have to convert their barplot to a boxplot after arguing with their advisor that the boxplot was the better option from the beginning. In summary, regardless of why one would have to refer back to previous version of their code, Git facilitates this process."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/santos-cl/dosSantosCaio.html#new-git-features-from-the-book",
    "href": "blog-2023/Blog-2-submissions/santos-cl/dosSantosCaio.html#new-git-features-from-the-book",
    "title": "Happy Git with R",
    "section": "New git features from the book",
    "text": "New git features from the book\nI was not familiar with the idea that one could refer other people to a specific version of a repository just by providing them with the hyperlink. This is fascinating, as project discussions could be much more effective since collaborators could simply say: I believe this aspect of the project worked better in version XX.XX, follow this link to check for yourself what I mean."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/sudi007/SudeshBhagat.html",
    "href": "blog-2023/Blog-2-submissions/sudi007/SudeshBhagat.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth. The chapter I read in-depth was Chapter1, Why Git? Why GitHub? This chapter caught my attention because although one may have used Git, it helps to get a refresher on the precise function of Git, along with its features. It introduces Git and GitHub to a new user in novice terms and with analogies that are easy to understand. The chapter also explains how to get Git working for users, where the first step is to install Git and connect it with GitHub and R. The chapter warns of probable challenges like merging projects when working collaboratively. Special features such as issues and pull request are presented, in addition to information about the benefits of using R with Git and GitHub. Target audience is discussed to help users discern whether Git and GitHub are of use to them.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?. Version control has been a challenge I have often faced in team projects, leading to working late nights under pressure. For example, for one of the classes last semester, a team of four was working on a project. Each one of us was working on a different aspect of the project which was stored on their local computers. It was then time to combine the various different files and present a final document. It was difficult to combine these individual sets of large files. The resultant document was difficult to understand. Using Git, these files could have been stored on the Git repository, with everyone accessing different sections of the document. This feature would have facilitated such collaboration that more than one person would have been able to see and work on the final combined file.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.. A new feature that I learned from the book was how it can be combined with RStudio. I use RStudio for my projects. Knowing that RStudio can be combined with Git helps me understand how changes can be made to projects in RStudio and then stored in the Git repository."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/gnbltrn/BeltranGino.html",
    "href": "blog-2023/Blog-2-submissions/gnbltrn/BeltranGino.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "**Summary of Chapter 6. Install Git.\nThis chapter includes instructions on how to install Git Bash. Given that I am new to Github and Git, I found it somewhat confusing at first. I had watched YouTube videos to familiarize myself with github and run into several videos about Git Bash, but did not know what it was, so after I completed the instructions in the book and installed Git in my PC, I then realized they were the same. After reading this chapter in more detail, I learned that Git has multiple names.\nSummary.\ngit –version ## git version 2.39.1\nOption 1 (highly recommended) from the link below (I used this option): https://gitforwindows.org/ Option 2 (recommended): Install Git for Windows via the Chocolatey package manager. I personally did not use this option. choco install git.install\nThe rest of the chapter if for Mac and Linux users, which I didn’t use.\n**Biggest Mishap Experience.\nI have worked on a number of projects, big and small, but I have no experience working on coding or software development projects. It seems to me, git and github apply the concepts of “document control” and “versioning” to coding, which allows the user to have one source of truth while cooperate with others. I have used other tools such as MS Project, SharePoint, SAP/R3, and more recently MS OneDrive for the same purpose of document control and cooperation. I have had no big mishap so far. However, I can mention that when not using these tools, authoring with others, a new document for instance, can be significantly more troublesome and painful. Just having the ability to go back to a previous version can be a life saver.\n**Git Example of One New Feature.\nEverything from Git and the book was new to me, but I can highlight I didn’t know about the capability of R to be connected with github to work in a team environment."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/gnbltrn/BeltranGino.html#prompt",
    "href": "blog-2023/Blog-2-submissions/gnbltrn/BeltranGino.html#prompt",
    "title": "Happy Git with R",
    "section": "Prompt:",
    "text": "Prompt:\ngit and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/motinaaa/KashanianMotahareh.html",
    "href": "blog-2023/Blog-2-submissions/motinaaa/KashanianMotahareh.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/motinaaa/KashanianMotahareh.html#chapter-5-install-or-upgrade-r-and-rstudio",
    "href": "blog-2023/Blog-2-submissions/motinaaa/KashanianMotahareh.html#chapter-5-install-or-upgrade-r-and-rstudio",
    "title": "Happy Git with R",
    "section": "Chapter 5: Install or upgrade R and RStudio",
    "text": "Chapter 5: Install or upgrade R and RStudio\n**Install R from here: https://cloud.r-project.org\n**Install RStudio from here: https://www.rstudio.com/products/rstudio/download/preview/\n**Update your R packages: update.packages(ask = FALSE, checkBuilt = TRUE)\nUsing old versions of software can be a hassle. For the best experience, it’s recommended to be on 4.something in R at this point. Keep at least one minor version up-to-date. Two minor versions behind will cause you problems as CRAN no longer supports pre-built binary add-on packages. Preview releases are similar to general releases, but they are used as release candidates in the build-up to new general releases. Preview version includes new features, but it is also very stable and highly usable. RStudio updates much more frequently than R itself. RStudio requires monthly updates, while R requires annual updates.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?. My last project was an interdisciplinary project in collaboration with chemical engineers, and we worked more often asynchronously than synchronously. When it comes to collaborating with distributed teams on projects, there are many challenges that must be overcome. The majority of the time I was unaware of their current changes in their experimental results, which had an effect on my results and added to my workload, as I had to go back and forth all the time to observe what they were doing. It is likely that GitHub could make this process much simpler in many ways, as it could track changes and go back to previous versions of a project, which would make the collaboration much easier.\nGive an example of one new git feature that you learned about from Jenny Bryan’s book.. I Learn more about branches in this book. With Git, users have the option of working on a line that runs parallel to the main files of the project. Branch is the term used to describe these lines. As a feature of Git, branches provide a way for developers to modify the project without having to make any changes to the original version of the code. Whenever a version is being developed, a production quality branch of the code will always be present in the master branch. On the branches, you can test and work on any new features you will be launching and then you can merge them with the main branch as soon as they are ready. With the help of a few Git commands, branching and merging can be done very quickly and easily. There is a possibility that one version of a project may contain a number of different branches as per the requirements of the user."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/maxwellskinner2002/SkinnerMaxwell.html",
    "href": "blog-2023/Blog-2-submissions/maxwellskinner2002/SkinnerMaxwell.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nThe chapter I read was Chapter 9: Personal access token for HTTPS. The chapter focused on access tokens and the differences and uses between HTTPS versus SSH. Access tokens are important in interacting with remote Git servers like Github. Using credentials like an access token proves we are a specific Github user. Git can communicate with a remote server either through HTTPS or SSH, the different protocols use different credentials. With HTTPS you will use an access token. An access token can be made a number of ways but as simple as using the R function “usethis::create_github_token()” in the command line. SSH keys were talked about in chapter 10.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nIn my final project for DS201, my team’s final project was entirely based in Google Colab. While Colab is a great resource for individual work and can be used if one is forced to use Google Drive or similar Google products, it is not great for organizing work accross multiple people. There were many issues that came with storing files in google drive and importing them into a script in Colab. As well, my team couldn’t ever figure out how to correctly mount each individual’s google drive to the project to be able to import things like excel files so we were forced to do the majority of work from just one computer instead of doing work equally accross everyone.\nUsing git would have solved this issue completely. Sharing files and making sure everyone is working with the same version of a file would have been solved simply by using git. Importing something as simple as an excel file is easy as the we can put the script and the excel file in the same folder for easy access. Github has made group projects now an ease. Minimal hiccups when it comes to productivity and having teammates work on the same file from different locations.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nIn Chapter 9, Jenny talks about the R function “usethis::create_github_token()” which is used to get and store a personal access token. And using a R package such as gitcreds, we can store this generated token locally onto your computer. This is great for working with remote servers and kinds of Github servers that require tokens. As with the changes in July 2020 detailed in this article github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ , the only way to access Git operations is through token authentication."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Sabrenar/RutledgeSabrena.html",
    "href": "blog-2023/Blog-2-submissions/Sabrenar/RutledgeSabrena.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nI read chapter 27 titled “The Repeated Amend.” It detailed a method to save several incremental changes to a Git repo in only one commit instead of several commits. This method is analogous to working on a word document and saving a new version after a larger change versus after only a few small changes.\nThe author outlines a workflow for the method then provides a couple work-arounds for common problems. The author’s method is to have several amended commits on the local repo then push a “finalized” commit to the Github repo. The biggest point of this chapter is to NOT push the local repo to the Github repo frequently.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nThe biggest mishap I’ve had in team project is updated scripts for the project not being in the same location as the data. Frequently, the data has been in one server, and the finalized data analysis scripts have been on a Github repo. This could have been avoided if there was a some sort of readme file directing readers to the Github in the directory with the data.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI learned about Git commands from “Happy Git and Github for the useR.” I have only accessed Github repos from their respective Github websites."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/luobo119/BaiYichuan.html",
    "href": "blog-2023/Blog-2-submissions/luobo119/BaiYichuan.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nChapter selected: 29 Pull, but you have local work This chapter introduce how to pull changes from upstream when you have local changes since the last pull. If the local changes do not affect the work from upstream, you can directly use ‘git pull’. If there are overlapped changes between remote and local files, you can either use ‘git stash’ or make a commit, which is preferred by the author. The simplest option is to fetch remote commits and merge them. For the conflicted parts, you need to either pick up one version of the changes or create a hybrid to resolve the conflicts. After using ‘git add’ to mark the files, you could commit and push. Another option is to use ‘git pull –rebase’, which pulls the upstream work in one commit and embodies the local work in another with no merge commits.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nWhen working with others, I and my teammates did separate parts but we still looked at each other’s code and made small changes that we thought are necessary. But as time goes by, we forgot the changes we made and there is something we should not change or the code would crash. And it is hard to find out the problem because the code could be long. This can be avoided by using git. We can look at the commit history and it is easier to find which changes are made and which cause the problem.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\n‘git stash’ would be a new feature I never used before. This feature allows you to temporarily store the changes you made locally away. And then you are allowed to use other commands such as ‘git pull’. In the Chapter 29, they use ‘git stash store’ to store the local changes in the stash list and use ‘git stash pop’ to get back the stashed state and apply it to the current state."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/AArabio/ArabioAlexandra.html",
    "href": "blog-2023/Blog-2-submissions/AArabio/ArabioAlexandra.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth.\n\nChapter 22: Branches The concept of branching allows an individual to ‘branch out’ from the main project to explore their own idea without anything happening to the original or main working code. Git works with this concept seamlessly allowing for branches to open and merge back quickly. One can create their own branch, switch between branches, and merge a branch with only a line of code. This chapter also explains how to deal with possible issue that may occur and recognizes that a conflict does not mean a disaster (this is often why we use branches… to avoid disaster). One of the main reasons for branching is to allow for brainstorming, consideration, and implementing new ideas… this is how progress is made.\n\nLooking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?.\n\nThrough majority of the team projects that I have been involved in, the largest mishap occurs from ‘stepping on each others toes’… When working in a group where everyone wants to be able to get something accomplished to achieve the best possible outcome, it can be subjective to each individual. When working on PowerPoint slides or writing a report; people tend to have differences in opinions on what the best layout is or the best wording for certain sentences. This is where I have found the greatest conflict because it becomes difficult if we are all working on the same document to change things without the work of others getting loss in the process and work may get lost. This problem could possibly be able to be avoided using git as it has its own system for backing up previous work, seeing who made changes, and when they were made.\n\nGive an example of one new git feature that you learned about from Jenny Bryan’s book..\n\nI have not read Jenny Bryan’s book previously and found it to be a great resource. Though I knew the general basics of git, I appreciated that the book walked through the processes of learning git and showed it truly as a processes and that confusion is okay and expected. Because of this I learned more about possible errors that could occur throughout the merging process and how to tackle them if they present themselves as issues. I also learned through this book that it is better to start a new project on GitHub first prior to working in a new project in R."
  },
  {
    "objectID": "blog-2023/Blog-2-submissions/Starwiiin/MohammadiarvejehParvin.html",
    "href": "blog-2023/Blog-2-submissions/Starwiiin/MohammadiarvejehParvin.html",
    "title": "Happy Git with R",
    "section": "",
    "text": "git and Github are tools for helping with versioning of files in collaborative efforts as well as archiving entries for your future self. Unfortunately working with git isn’t always completely straightforward. Jenny Bryan’s book “Happy git and github with R” helps with that. The book is available from http://happygitwithr.com/. Have a look over the index and pick one of the chapters for a more in-depth read.\nWrite a blog post answering the following questions:\n\nWrite a short (100-150 words) summary of the chapter you read in-depth. Question 1: (I read the chapter 22, “Branches”)\n\nMy answer: Basically, branching is used to take a detour from the main stream to work on the code without making any instant changes to the source file. This characteristic lets people work at the same time on the project without any conflicts or errors. To use this feature, we should create a new branch. One person may or may not create multiple branches; in this case, the person can use “git checkout” to switch between the branches. One important point is that when we switch to another branch while we are not done with the other branch(es), we should commit the in progress branch temporarily. When we want to resume working on the incomplete branch, we should reset the target branch. It worth to mention that there are different type of resetting such as soft, hard, and mixed that help resetting back to different past stages of the interest. Finally, we can merge the complete branch. If we want to merge more than one branches, it is possible to see the conflict message if we have changed the same part in the both branches. In this situation, we can get the status and check the conflict easily. Also, we always can go back to the previous stages of the branch to check and do the revisions accordingly. 2. Looking back at all of the team projects you have been involved in, describe the biggest mishap you had. Could that have been avoided using git? How?. Question 2: My answer: I think one of the biggest challenge that I experienced during my Ph.D. in team working was that we had to work individually on our ideas and we could not document everyone’s work properly. Also, we did not access to each others works while we were working. Another problem was in the review process of each others work; if one might change something based on another person’s feedback, the change was not tracked easily. The advantage of working with fit is that everyone work in one repository, save everything in one location, always accessible for other team members, easy to review other people’s work, easy to track changes. 3. Give an example of one new git feature that you learned about from Jenny Bryan’s book..\nQuestion 3: My answer: I found the branch option very useful for collaborations! suppose our team is working on a competition which is a classification problem. There is a source code that applied a random forest model and got an average classification performance. Now, I guess that I can improve the model by tuning the hyper parameters with either Bayesian optimization or grid search. I can easily create two branches; one for examination of Bayesian optimization, another for implementation of the grid search. In this case, I can work on the two ideas separately without any changes in the source file, test the both ideas, pick the best one, and merge the final version."
  },
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Untitled",
    "section": "",
    "text": "Breviary et al. (2006); Spence and Wainer (1997)\n\n\n\n\nReferences\n\nBreviary, The Commercial And Political Atlas And Statistical, William Playfair, Howard Wainer, and Ian Spence. 2006. “A Visionary and a Scoundrel.” American Scientist 94 (3): 274–75. https://doi.org/10.1511/2006.59.274.\n\n\nSpence, Ian, and Howard Wainer. 1997. “Who Was Playfair?” CHANCE 10 (January): 35–37."
  },
  {
    "objectID": "blog-testing.html",
    "href": "blog-testing.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\nMar 23, 2023\n\n\nMake your own website – Prompt 8\n\n\nWho wrote this\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff… – Prompt 7\n\n\nWho wrote this\n\n\n\n\nMar 9, 2023\n\n\nLicense\n\n\nYingchao Zhou\n\n\n\n\nMar 9, 2023\n\n\nR licensing\n\n\nKundan Kumar\n\n\n\n\nMar 9, 2023\n\n\nLicensing Blog\n\n\nAR\n\n\n\n\nMar 9, 2023\n\n\nLearning Licensing\n\n\nLandon Getting\n\n\n\n\nMar 9, 2023\n\n\nLicenses\n\n\nMuxin Hua\n\n\n\n\nMar 9, 2023\n\n\nR Licensing and Package Dependencies\n\n\nKelly Nascimento Thompson\n\n\n\n\nMar 9, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nMar 9, 2023\n\n\nLicenses\n\n\nValerie Han\n\n\n\n\nMar 9, 2023\n\n\nWhat License when?\n\n\nIan Parzyszek\n\n\n\n\nMar 9, 2023\n\n\nLegal Stuff\n\n\nLogan Johnson\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff…\n\n\nAtefeh Anisi\n\n\n\n\nMar 9, 2023\n\n\nIt’s not the end…\n\n\nAn Phan\n\n\n\n\nMar 9, 2023\n\n\nLegal Details of Licenses\n\n\nMarie Hardt\n\n\n\n\nMar 9, 2023\n\n\nDependencies\n\n\nCDS\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff\n\n\nSudesh Bhagat\n\n\n\n\nMar 9, 2023\n\n\nLicenses and Packages\n\n\nSabrena Rutledge\n\n\n\n\nMar 9, 2023\n\n\nLicense\n\n\nyc bai\n\n\n\n\nMar 9, 2023\n\n\nLicense Fun\n\n\nAlexandra Arabio\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 2, 2023\n\n\nrenv package\n\n\nYingchao Zhou\n\n\n\n\nMar 2, 2023\n\n\nrenv R package\n\n\nKundan Kumar\n\n\n\n\nMar 2, 2023\n\n\nrenv blog\n\n\nAR\n\n\n\n\nMar 2, 2023\n\n\nExploring renv\n\n\nLandon Getting\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility\n\n\nMuxin Hua\n\n\n\n\nMar 2, 2023\n\n\nRenv\n\n\nCharch\n\n\n\n\nMar 2, 2023\n\n\nRenv package overview\n\n\nKelly Nascimento Thompson\n\n\n\n\nMar 2, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nMar 2, 2023\n\n\nrenv\n\n\nValerie Han\n\n\n\n\nMar 2, 2023\n\n\nLearning Renv\n\n\nIan Parzyszek\n\n\n\n\nMar 2, 2023\n\n\n‘renv’ Package and Data Reproducibility\n\n\nLogan Johnson\n\n\n\n\nMar 2, 2023\n\n\nWorking with ‘renv’ package\n\n\nAtefeh Anisi\n\n\n\n\nMar 2, 2023\n\n\nExploring renv\n\n\nMarie Hardt\n\n\n\n\nMar 2, 2023\n\n\nR env\n\n\nCaio dos Santos\n\n\n\n\nMar 2, 2023\n\n\nGithub Actions\n\n\nSudesh Bhagat\n\n\n\n\nMar 2, 2023\n\n\nBadge is Coool!\n\n\nMotina\n\n\n\n\nMar 2, 2023\n\n\nReproducibility\n\n\nSabrena Rutledge\n\n\n\n\nMar 2, 2023\n\n\nrenv package\n\n\nyc bai\n\n\n\n\nMar 2, 2023\n\n\ntitle :)\n\n\nAlexandra Arabio\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility… – Prompt 6\n\n\nWho wrote this\n\n\n\n\nFeb 23, 2023\n\n\nKeep track of results and data\n\n\nYingchao Zhou\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility\n\n\nKundan Kumar\n\n\n\n\nFeb 23, 2023\n\n\nReading about COVID Calculators\n\n\nAR\n\n\n\n\nFeb 23, 2023\n\n\nTREEFINDER - Leveraging Research Software for Political Agendas\n\n\nLandon Getting\n\n\n\n\nFeb 23, 2023\n\n\nRetraction\n\n\nMuxin Hua\n\n\n\n\nFeb 23, 2023\n\n\nUC Berkeley’s Ninov 2.0\n\n\nNot Charlie\n\n\n\n\nFeb 23, 2023\n\n\nRetraction\n\n\nCharch\n\n\n\n\nFeb 23, 2023\n\n\nRules for Research Reproducibility\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 23, 2023\n\n\nRetraction Watch – Reliability and Sensitivity of Neuromuscular and Perceptual Fatigue Measures in Collegiate Men’s Basketball\n\n\nDenise Bradford\n\n\n\n\nFeb 23, 2023\n\n\nBlog Five\n\n\nHarun Celik\n\n\n\n\nFeb 23, 2023\n\n\nReproducibility\n\n\nValerie Han\n\n\n\n\nFeb 23, 2023\n\n\nReplication of Data Presentation\n\n\nIan Parzyszek\n\n\n\n\nFeb 23, 2023\n\n\nImportance of Data Reproducibility\n\n\nLogan Johnson\n\n\n\n\nFeb 23, 2023\n\n\nHow to make our research reproducible\n\n\nAtefeh Anisi\n\n\n\n\nFeb 23, 2023\n\n\nPaper retracted alert!\n\n\nAn Phan\n\n\n\n\nFeb 23, 2023\n\n\nEthics in Reproducible Research\n\n\nMarie Hardt\n\n\n\n\nFeb 23, 2023\n\n\nDotting I’s and crossing T’s…\n\n\nCaio dos Santos\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility\n\n\nSudesh Bhagat\n\n\n\n\nFeb 23, 2023\n\n\nThe One Where Ethics Meet Reproducibility\n\n\nMotina\n\n\n\n\nFeb 23, 2023\n\n\nReproducing Randomness\n\n\nMaxwell Skinner\n\n\n\n\nFeb 23, 2023\n\n\nEthically Managing Data\n\n\nSabrena Rutledge\n\n\n\n\nFeb 23, 2023\n\n\nReproducible Computational Research\n\n\nyc bai\n\n\n\n\nFeb 23, 2023\n\n\nNumber 10\n\n\nAlexandra Arabio\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility… – Prompt 5\n\n\nWho wrote this\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine paradigm - Prompt 4\n\n\nWho wrote this\n\n\n\n\nFeb 16, 2023\n\n\nSplit, apply, combine\n\n\nYingchao Zhou\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine Strategy for Data Analysis\n\n\nKundan Kumar\n\n\n\n\nFeb 16, 2023\n\n\ndplyr vs plyr\n\n\nLandon Getting\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nNot Charlie\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nTyler Wiederich\n\n\n\n\nFeb 16, 2023\n\n\nplyr and dplyr\n\n\nCharchit Shukla\n\n\n\n\nFeb 16, 2023\n\n\nTesting the ‘dplyr’ functionality\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 16, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine Strategy\n\n\nValerie Han\n\n\n\n\nFeb 16, 2023\n\n\nGetting familiar with dpylr\n\n\nIan Parzyszek\n\n\n\n\nFeb 16, 2023\n\n\n‘plyr’ to d’plyr’\n\n\nLogan Johnson\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nAn Phan\n\n\n\n\nFeb 16, 2023\n\n\nSplit-Apply-Combine\n\n\nMarie Hardt\n\n\n\n\nFeb 16, 2023\n\n\nplyr-dplyr-baseR\n\n\nCaio dos Santos\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nSudesh Bhagat\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nMaxwell Skinner\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nyc bai\n\n\n\n\nFeb 16, 2023\n\n\nSplit, Apply, Combine - Relevancy\n\n\nAlexandra Arabio\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nYingchao Zhou\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nKundan Kummar\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nar\n\n\n\n\nFeb 9, 2023\n\n\nBook Building is Backbreaking\n\n\nLandon Getting\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nMuxin Hua\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nMatt Kavanaugh\n\n\n\n\nFeb 9, 2023\n\n\nBipity-Bopity-Book?\n\n\nNot Charlie\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book\n\n\nTyler Wiederich\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nCharch\n\n\n\n\nFeb 9, 2023\n\n\nRendering a book using ‘bookdown’\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 9, 2023\n\n\nError Fixing Process\n\n\nHarun Celik\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nJust Testing\n\n\n\n\nFeb 9, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nLogan Johnson\n\n\n\n\nFeb 9, 2023\n\n\nI finally built a book\n\n\nAtefeh Anisi\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nAn Phan\n\n\n\n\nFeb 9, 2023\n\n\nAdventures in Book Building\n\n\nMarie Hardt\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nCaio dos Santos\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nSudesh Bhagat\n\n\n\n\nFeb 9, 2023\n\n\nDrawning in ERRORS\n\n\nMotina\n\n\n\n\nFeb 9, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book with R’s bookdown\n\n\nSabrena Rutledge\n\n\n\n\nFeb 9, 2023\n\n\nExperience of building a book\n\n\nYCB\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nAA\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book – Prompt 3\n\n\nWho wrote this\n\n\n\n\nFeb 5, 2023\n\n\nHappy Git with R\n\n\nHarun Celik\n\n\n\n\nFeb 3, 2023\n\n\nHappy Git with R\n\n\nSudesh Bhagat\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nThe Prompt for Blog 2\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYingchao Zhou\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nKundan Kumar\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYour Name\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nLandon Getting\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMuxin Hua\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nNot Charlie\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nTyler Wiederich\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nCharch\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMatt Kavanaugh\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nHaoming Wang\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nValerie Han\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nIan Parzyszek\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nLogan Johnson\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAtefeh Anisi\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAn Phan\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMarie Hardt\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nSomebody\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nGino Beltran\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMotina\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMaxwell Skinner\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nSabrena Rutledge\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYCB\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAlexadra Arabio\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nYingchao Zhou\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nKundan Kumar\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAnyesha Ray\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nLandon Getting\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMuxin Hua\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMatt Kavanaugh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCharlie Bonk\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nTyler Wiederich\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCharchit Shukla\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nKelly Nascimento Thompson\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nDenise Bradford\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCelik Harun\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nHaoming Wang\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nValerie Han\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nIan Parzyszek\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nLogan Johnson\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAnisi Atefeh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAn Pham\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMarie Hardt\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCaio dos Santos\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nBhagat Sudesh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nGino Beltran\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMotahareh Kashanian\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nSabrena Rutledge\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nYichuan Bai\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAlexandra Arabio\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 9, 2022\n\n\nI’m not a lawyer\n\n\nNot Charlie\n\n\n\n\nFeb 16, 2022\n\n\nplyr to dplyr\n\n\nAR\n\n\n\n\nFeb 16, 2022\n\n\nSplit Apply Combine\n\n\nMuxin Hua\n\n\n\n\nFeb 16, 2022\n\n\nBlog post 4 - Split-Apply-Combine\n\n\nDenise Bradford\n\n\n\n\nFeb 16, 2022\n\n\nWorking with ‘Plyr’ package\n\n\nAtefeh Anisi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The full syllabus is available here"
  },
  {
    "objectID": "schedule.html#course-topics",
    "href": "schedule.html#course-topics",
    "title": "Schedule",
    "section": "Course Topics",
    "text": "Course Topics\n\n\n\nWeek\nTopic\nNotes\n\n\n\n\n1 - 2\nWorking Environment and Review Git, GitHub, and R Markdown\nJan 17  Course intro & syllabus | Collaborations - test case | data: 2015 BRFSS data for Iowa | Code book: BRFSS Codebook 2015\n\n\n \n \nJan 19 Collaborations - test case - part 2 | a solution to the test case\n\n\n \n \nJan 24 tools for collaborations | R Markdown refresher | to add or not to add? that is the git-tion\n\n\n3 - 5\nData structures in R: factors, lists, trees\nJan 26 Results from R & friends | Reviewing elements of the tidyverse: ggplot2, dplyr, tidyr with solutions\n\n\n \n \nJan 31 Reviewing elements of the tidyverse: ggplot2, dplyr, tidyr with solutions\n\n\n \n \nFeb 2 Lab #1\n\n\n \n \nFeb 7 Review of basic R types and structures, first look at lists, code\n\n\n \n \nFeb 9 List objects\n\n\n \n \nFeb 14 Recap of Blog 3, List objects, code\n\n\n \n \nFeb 16 Lab #2\n\n\n6\nSplit-apply-combine strategies with lists, Review of functional programming, conditionals, loops.\nFeb 21 Dates and time, code\n\n\n \n \nFeb 23 Reviewing Functions, Split-apply-combine with lists, code\n\n\n7-8\nPackage system in R\nFeb 28 A first R package, Let’s do that again with litr, code\n\n\n \n \nMar 2 Lab #3\n\n\n \n \nMar 7 Data in packages, Package dependencies\n\n\n \n \nMar 9 Logistics, Package dependencies, The error fixing cycle\n\n\n \n \nMar 21\n\n\n9-10\nTesting code & Critical analysis of code\nMar 23\n\n\n \n \nMar 28\n\n\n11\nWeb scraping, working with text: awk and grep (lab week)\nMar 30\n\n\n \n \nApr 4\n\n\n12\nEvent driven programming\nApr 6\n\n\n \n \nApr 11\n\n\n \n \nApr 13\n\n\n13\nParsing data, profiling code\nApr 18\n\n\n \n \nApr 20\n\n\n14\nDatabases\nApr 25\n\n\n \n \nApr 27\n\n\n15, Finals\nProject Presentations\nMay 2\n\n\n \n \nMay 4\n\n\n \n \nMay 11, 12-2pm"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\n\n\nPrompt:\n\n\n\n\n\n\nMar 23, 2023\n\n\nMake your own website – Prompt 8\n\n\nWho wrote this\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff… – Prompt 7\n\n\nWho wrote this\n\n\n\n\nMar 9, 2023\n\n\nLicense\n\n\nYingchao Zhou\n\n\n\n\nMar 9, 2023\n\n\nR licensing\n\n\nKundan Kumar\n\n\n\n\nMar 9, 2023\n\n\nLicensing Blog\n\n\nAR\n\n\n\n\nMar 9, 2023\n\n\nLearning Licensing\n\n\nLandon Getting\n\n\n\n\nMar 9, 2023\n\n\nLicenses\n\n\nMuxin Hua\n\n\n\n\nMar 9, 2023\n\n\nR Licensing and Package Dependencies\n\n\nKelly Nascimento Thompson\n\n\n\n\nMar 9, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nMar 9, 2023\n\n\nLicenses\n\n\nValerie Han\n\n\n\n\nMar 9, 2023\n\n\nWhat License when?\n\n\nIan Parzyszek\n\n\n\n\nMar 9, 2023\n\n\nLegal Stuff\n\n\nLogan Johnson\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff…\n\n\nAtefeh Anisi\n\n\n\n\nMar 9, 2023\n\n\nIt’s not the end…\n\n\nAn Phan\n\n\n\n\nMar 9, 2023\n\n\nLegal Details of Licenses\n\n\nMarie Hardt\n\n\n\n\nMar 9, 2023\n\n\nDependencies\n\n\nCDS\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff\n\n\nSudesh Bhagat\n\n\n\n\nMar 9, 2023\n\n\nLicenses and Packages\n\n\nSabrena Rutledge\n\n\n\n\nMar 9, 2023\n\n\nLicense\n\n\nyc bai\n\n\n\n\nMar 9, 2023\n\n\nLicense Fun\n\n\nAlexandra Arabio\n\n\n\n\nMar 9, 2023\n\n\nAll that legal stuff…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 2, 2023\n\n\nrenv package\n\n\nYingchao Zhou\n\n\n\n\nMar 2, 2023\n\n\nrenv R package\n\n\nKundan Kumar\n\n\n\n\nMar 2, 2023\n\n\nrenv blog\n\n\nAR\n\n\n\n\nMar 2, 2023\n\n\nExploring renv\n\n\nLandon Getting\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility\n\n\nMuxin Hua\n\n\n\n\nMar 2, 2023\n\n\nRenv\n\n\nCharch\n\n\n\n\nMar 2, 2023\n\n\nRenv package overview\n\n\nKelly Nascimento Thompson\n\n\n\n\nMar 2, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nMar 2, 2023\n\n\nrenv\n\n\nValerie Han\n\n\n\n\nMar 2, 2023\n\n\nLearning Renv\n\n\nIan Parzyszek\n\n\n\n\nMar 2, 2023\n\n\n‘renv’ Package and Data Reproducibility\n\n\nLogan Johnson\n\n\n\n\nMar 2, 2023\n\n\nWorking with ‘renv’ package\n\n\nAtefeh Anisi\n\n\n\n\nMar 2, 2023\n\n\nExploring renv\n\n\nMarie Hardt\n\n\n\n\nMar 2, 2023\n\n\nR env\n\n\nCaio dos Santos\n\n\n\n\nMar 2, 2023\n\n\nGithub Actions\n\n\nSudesh Bhagat\n\n\n\n\nMar 2, 2023\n\n\nBadge is Coool!\n\n\nMotina\n\n\n\n\nMar 2, 2023\n\n\nReproducibility\n\n\nSabrena Rutledge\n\n\n\n\nMar 2, 2023\n\n\nrenv package\n\n\nyc bai\n\n\n\n\nMar 2, 2023\n\n\ntitle :)\n\n\nAlexandra Arabio\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 2, 2023\n\n\nMore on reproducibility… – Prompt 6\n\n\nWho wrote this\n\n\n\n\nFeb 23, 2023\n\n\nKeep track of results and data\n\n\nYingchao Zhou\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility\n\n\nKundan Kumar\n\n\n\n\nFeb 23, 2023\n\n\nReading about COVID Calculators\n\n\nAR\n\n\n\n\nFeb 23, 2023\n\n\nTREEFINDER - Leveraging Research Software for Political Agendas\n\n\nLandon Getting\n\n\n\n\nFeb 23, 2023\n\n\nRetraction\n\n\nMuxin Hua\n\n\n\n\nFeb 23, 2023\n\n\nUC Berkeley’s Ninov 2.0\n\n\nNot Charlie\n\n\n\n\nFeb 23, 2023\n\n\nRetraction\n\n\nCharch\n\n\n\n\nFeb 23, 2023\n\n\nRules for Research Reproducibility\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 23, 2023\n\n\nRetraction Watch – Reliability and Sensitivity of Neuromuscular and Perceptual Fatigue Measures in Collegiate Men’s Basketball\n\n\nDenise Bradford\n\n\n\n\nFeb 23, 2023\n\n\nBlog Five\n\n\nHarun Celik\n\n\n\n\nFeb 23, 2023\n\n\nReproducibility\n\n\nValerie Han\n\n\n\n\nFeb 23, 2023\n\n\nReplication of Data Presentation\n\n\nIan Parzyszek\n\n\n\n\nFeb 23, 2023\n\n\nImportance of Data Reproducibility\n\n\nLogan Johnson\n\n\n\n\nFeb 23, 2023\n\n\nHow to make our research reproducible\n\n\nAtefeh Anisi\n\n\n\n\nFeb 23, 2023\n\n\nPaper retracted alert!\n\n\nAn Phan\n\n\n\n\nFeb 23, 2023\n\n\nEthics in Reproducible Research\n\n\nMarie Hardt\n\n\n\n\nFeb 23, 2023\n\n\nDotting I’s and crossing T’s…\n\n\nCaio dos Santos\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility\n\n\nSudesh Bhagat\n\n\n\n\nFeb 23, 2023\n\n\nThe One Where Ethics Meet Reproducibility\n\n\nMotina\n\n\n\n\nFeb 23, 2023\n\n\nReproducing Randomness\n\n\nMaxwell Skinner\n\n\n\n\nFeb 23, 2023\n\n\nEthically Managing Data\n\n\nSabrena Rutledge\n\n\n\n\nFeb 23, 2023\n\n\nReproducible Computational Research\n\n\nyc bai\n\n\n\n\nFeb 23, 2023\n\n\nNumber 10\n\n\nAlexandra Arabio\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility…\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 23, 2023\n\n\nEthics and Reproducibility… – Prompt 5\n\n\nWho wrote this\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine paradigm - Prompt 4\n\n\nWho wrote this\n\n\n\n\nFeb 16, 2023\n\n\nSplit, apply, combine\n\n\nYingchao Zhou\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine Strategy for Data Analysis\n\n\nKundan Kumar\n\n\n\n\nFeb 16, 2023\n\n\ndplyr vs plyr\n\n\nLandon Getting\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nNot Charlie\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nTyler Wiederich\n\n\n\n\nFeb 16, 2023\n\n\nplyr and dplyr\n\n\nCharchit Shukla\n\n\n\n\nFeb 16, 2023\n\n\nTesting the ‘dplyr’ functionality\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 16, 2023\n\n\nSplit-Apply-Combine Post\n\n\nHarun Celik\n\n\n\n\nFeb 16, 2023\n\n\nThe Split-Apply-Combine Strategy\n\n\nValerie Han\n\n\n\n\nFeb 16, 2023\n\n\nGetting familiar with dpylr\n\n\nIan Parzyszek\n\n\n\n\nFeb 16, 2023\n\n\n‘plyr’ to d’plyr’\n\n\nLogan Johnson\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nAn Phan\n\n\n\n\nFeb 16, 2023\n\n\nSplit-Apply-Combine\n\n\nMarie Hardt\n\n\n\n\nFeb 16, 2023\n\n\nplyr-dplyr-baseR\n\n\nCaio dos Santos\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nSudesh Bhagat\n\n\n\n\nFeb 16, 2023\n\n\nTitle of your post\n\n\nMaxwell Skinner\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nyc bai\n\n\n\n\nFeb 16, 2023\n\n\nSplit, Apply, Combine - Relevancy\n\n\nAlexandra Arabio\n\n\n\n\nFeb 16, 2023\n\n\nSplit-apply-combine\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nYingchao Zhou\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nKundan Kummar\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nar\n\n\n\n\nFeb 9, 2023\n\n\nBook Building is Backbreaking\n\n\nLandon Getting\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nMuxin Hua\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nMatt Kavanaugh\n\n\n\n\nFeb 9, 2023\n\n\nBipity-Bopity-Book?\n\n\nNot Charlie\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book\n\n\nTyler Wiederich\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nCharch\n\n\n\n\nFeb 9, 2023\n\n\nRendering a book using ‘bookdown’\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 9, 2023\n\n\nError Fixing Process\n\n\nHarun Celik\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nJust Testing\n\n\n\n\nFeb 9, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nLogan Johnson\n\n\n\n\nFeb 9, 2023\n\n\nI finally built a book\n\n\nAtefeh Anisi\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nAn Phan\n\n\n\n\nFeb 9, 2023\n\n\nAdventures in Book Building\n\n\nMarie Hardt\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nCaio dos Santos\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nSudesh Bhagat\n\n\n\n\nFeb 9, 2023\n\n\nDrawning in ERRORS\n\n\nMotina\n\n\n\n\nFeb 9, 2023\n\n\nTitle of your post\n\n\nFirstname Lastname\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book with R’s bookdown\n\n\nSabrena Rutledge\n\n\n\n\nFeb 9, 2023\n\n\nExperience of building a book\n\n\nYCB\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a Book\n\n\nAA\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nFeb 9, 2023\n\n\nBuilding a book – Prompt 3\n\n\nWho wrote this\n\n\n\n\nFeb 5, 2023\n\n\nHappy Git with R\n\n\nHarun Celik\n\n\n\n\nFeb 3, 2023\n\n\nHappy Git with R\n\n\nSudesh Bhagat\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nThe Prompt for Blog 2\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYingchao Zhou\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nKundan Kumar\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYour Name\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nLandon Getting\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMuxin Hua\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nNot Charlie\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nTyler Wiederich\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nCharch\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nKelly Nascimento Thompson\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMatt Kavanaugh\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nHaoming Wang\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nValerie Han\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nIan Parzyszek\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nLogan Johnson\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAtefeh Anisi\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAn Phan\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMarie Hardt\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nSomebody\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nGino Beltran\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMotina\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nMaxwell Skinner\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nSabrena Rutledge\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nYCB\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nAlexadra Arabio\n\n\n\n\nFeb 2, 2023\n\n\nHappy Git with R\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nYingchao Zhou\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nKundan Kumar\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAnyesha Ray\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nLandon Getting\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMuxin Hua\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMatt Kavanaugh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCharlie Bonk\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nTyler Wiederich\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCharchit Shukla\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nKelly Nascimento Thompson\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nDenise Bradford\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCelik Harun\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nHaoming Wang\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nValerie Han\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nIan Parzyszek\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nLogan Johnson\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAnisi Atefeh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAn Pham\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMarie Hardt\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nCaio dos Santos\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nBhagat Sudesh\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nGino Beltran\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nMotahareh Kashanian\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nSabrena Rutledge\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nYichuan Bai\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nAlexandra Arabio\n\n\n\n\nJan 26, 2023\n\n\nAsking Good Questions\n\n\nParvin Mohammadiarvejeh\n\n\n\n\nMar 9, 2022\n\n\nI’m not a lawyer\n\n\nNot Charlie\n\n\n\n\nFeb 16, 2022\n\n\nplyr to dplyr\n\n\nAR\n\n\n\n\nFeb 16, 2022\n\n\nSplit Apply Combine\n\n\nMuxin Hua\n\n\n\n\nFeb 16, 2022\n\n\nBlog post 4 - Split-Apply-Combine\n\n\nDenise Bradford\n\n\n\n\nFeb 16, 2022\n\n\nWorking with ‘Plyr’ package\n\n\nAtefeh Anisi\n\n\n\n\n\n\nNo matching items"
  }
]